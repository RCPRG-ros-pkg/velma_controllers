import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");

ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
ros.import("velma_hardware");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("ethercat_controller")
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")

setActivity("lwr_controller", 0, 1, ORO_SCHED_RT)

//------------------------------------------------------------------------------
//-- Hardware interface
//------------------------------------------------------------------------------

loadComponent("FRIr", "FRIComponent");
setActivity("FRIr", 0.0, 6, ORO_SCHED_RT);
FRIr.loadService("rosparam");
FRIr.rosparam.getAll();

loadComponent("FRIl", "FRIComponent")
setActivity("FRIl", 0.0, 6, ORO_SCHED_RT)
FRIl.loadService("rosparam");
FRIl.rosparam.getAll();

loadComponent("EC", "ECMaster")
setActivity("EC", 0.001, 6, ORO_SCHED_RT)
EC.loadService("rosparam")
EC.rosparam.getAll()
EC.configure();
EC.rosparam.getAll()

loadComponent("VT", "VelmaTorso")
setActivity("VT", 0.001, 6, ORO_SCHED_RT)
VT.loadService("rosparam");
VT.rosparam.getAll();

FRIr.configure();
FRIl.configure();
VT.configure();

connect("EC.torso.MotorPosition", "VT.MotorPosition", ConnPolicy());
connect("EC.torso.MotorVelocity", "VT.MotorVelocity", ConnPolicy());
connect("EC.torso.MotorCurrentCommand", "VT.MotorCurrentCommand", ConnPolicy());

stream("FRIr.KRL_CMD", ros.comm.topic("/right_arm/KRL_CMD"));
stream("FRIl.KRL_CMD", ros.comm.topic("/left_arm/KRL_CMD"));

loadComponent("LWRrDiag", "FRIDiagnostics")
setActivity("LWRrDiag", 0.1, 1, ORO_SCHED_RT)
LWRrDiag.loadService("rosparam");
LWRrDiag.rosparam.getAll();

connect("FRIr.RobotState", "LWRrDiag.RobotState", ConnPolicy());
connect("FRIr.FRIState", "LWRrDiag.FRIState", ConnPolicy());
stream("LWRrDiag.Diagnostics", ros.comm.topic("/diagnostic"));
LWRrDiag.configure()

loadComponent("LWRlDiag", "FRIDiagnostics")
setActivity("LWRlDiag", 0.1, 1, ORO_SCHED_RT)
LWRlDiag.loadService("rosparam");
LWRlDiag.rosparam.getAll();

connect("FRIl.RobotState", "LWRlDiag.RobotState", ConnPolicy());
connect("FRIl.FRIState", "LWRlDiag.FRIState", ConnPolicy());
stream("LWRlDiag.Diagnostics", ros.comm.topic("/diagnostic"));
LWRlDiag.configure()

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.001, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

//------------------------------------------------------------------------------
//-- Torso Joystick Teleop
//------------------------------------------------------------------------------

loadComponent("TJ", "TorsoTeleopJoy")
setActivity("TJ", 0.001, 6, ORO_SCHED_RT)
TJ.loadService("rosparam");
TJ.rosparam.getAll();
TJ.configure();

loadComponent("HL", "HeadLookAt3D")
setActivity("HL", 0.001, 6, ORO_SCHED_RT)
HL.loadService("rosparam");
HL.rosparam.getAll();
HL.configure();

loadComponent("PT", "PoseTransform")
setActivity("PT", 0.001, 6, ORO_SCHED_RT)
PT.loadService("rosparam");
PT.rosparam.getAll();
PT.configure();


connect("TJ.PrimaryFrameSelector", "PT.PrimaryFrameSelector", ConnPolicy());
connect("TJ.HeadTargetPoint", "PT.PrimaryTargetPoint", ConnPolicy());
connect("PT.SecondaryTargetPoint", "HL.TargetPoint", ConnPolicy());

connect("VT.JointPosition", "TJ.JointPosition", ConnPolicy());
connect("VT.JointPosition", "HL.JointPosition", ConnPolicy());
//connect("TJ.HeadTargetPoint", "HL.TargetPoint", ConnPolicy());

loadComponent("TJc", "VectorConcate2");
setActivity("TJc", 0.001, 6, ORO_SCHED_RT)

connect("TJ.TorsoJointPositionCommand", "TJc.In0", ConnPolicy());
//connect("TJ.HeadJointPositionCommand", "TJc.In1", ConnPolicy());
connect("HL.HeadJointPositionCommand", "TJc.In1", ConnPolicy());
connect("TJc.Out", "VT.JointPositionCommand", ConnPolicy());
TJc.configure();

stream("TJ.Joy", ros.comm.topic("/joy"));
//stream("HL.TargetPoint", ros.comm.topic("/look_at"))
//stream("TJ.HeadTargetPoint", ros.comm.topic("/look_at"))

//------------------------------------------------------------------------------
//-- Camera Trigger
//------------------------------------------------------------------------------

loadComponent("TGR", "TriggerGenerator");
setActivity("TGR", 0.05, 2, ORO_SCHED_RT);
TGR.configure();

connect("TGR.Trigger", "EC.torso.DigitalOutput1", ConnPolicy());
stream("TGR.TriggerStamp", ros.comm.topic("/camera_trigger_stamp"));

//------------------------------------------------------------------------------
//-- Velma controller
//------------------------------------------------------------------------------

loadComponent("Ps", "VectorSplit2");
Ps.loadService("rosparam");
Ps.rosparam.getAll();
connect("VT.JointPosition", "Ps.In", ConnPolicy());

loadComponent("Jc", "VectorConcate3");

connect("Ps.Out0", "Jc.In0", ConnPolicy());
connect("FRIr.JointPosition", "Jc.In1", ConnPolicy());
connect("FRIl.JointPosition", "Jc.In2", ConnPolicy());

loadComponent("Vs", "VectorSplit2");
Vs.loadService("rosparam");
Vs.rosparam.getAll();
connect("VT.JointVelocity", "Vs.In", ConnPolicy());

loadComponent("Jvc", "VectorConcate3");

connect("Vs.Out0", "Jvc.In0", ConnPolicy());
connect("FRIr.JointVelocity", "Jvc.In1", ConnPolicy());
connect("FRIl.JointVelocity", "Jvc.In2", ConnPolicy());

loadComponent("Ts", "VectorSplit3");
Ts.loadService("rosparam");
Ts.rosparam.getAll();

connect("Ts.Out0", "VT.JointTorqueCommand", ConnPolicy());
connect("Ts.Out1", "FRIr.JointTorqueCommand", ConnPolicy());
connect("Ts.Out2", "FRIl.JointTorqueCommand", ConnPolicy());

loadComponent("Dwr", "DecimatorWrench");
setActivity("Dwr", 0.01, 1, ORO_SCHED_RT)
connect("Dwr.In", "FRIr.CartesianWrench", ConnPolicy());
stream("Dwr.Out", ros.comm.topic("/right_arm/wrench"));

loadComponent("Dwl", "DecimatorWrench");
setActivity("Dwl", 0.01, 1, ORO_SCHED_RT)
connect("Dwl.In", "FRIl.CartesianWrench", ConnPolicy());
stream("Dwl.Out", ros.comm.topic("/left_arm/wrench"));

//loadComponent("Mass", "RobotMassMatrix");
loadComponent("Mass", "MassTest");
Mass.loadService("robot");
Mass.configure();

connect("Jc.Out", "Mass.JointPosition", ConnPolicy());
connect("FRIl.MassMatrix", "Mass.MassMatrixLeft", ConnPolicy());
connect("FRIr.MassMatrix", "Mass.MassMatrixRight", ConnPolicy());

loadComponent("CImp", "CartesianImpedance");
CImp.loadService("robot");
CImp.configure();

connect("Jc.Out", "CImp.JointPosition", ConnPolicy());
connect("Jvc.Out", "CImp.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "CImp.MassMatrixInv", ConnPolicy());

connect("CImp.JointTorqueCommand", "Ts.In", ConnPolicy());

loadComponent("PoseIntRight", "CartesianInterpolator");

connect("PoseIntRight.CartesianPositionCommand", "CImp.CartesianPositionCommand0", ConnPolicy());

loadComponent("PoseIntLeft", "CartesianInterpolator");

connect("PoseIntLeft.CartesianPositionCommand", "CImp.CartesianPositionCommand1", ConnPolicy());

// tool

loadComponent("ToolIntRight", "CartesianInterpolator")
ToolIntRight.configure();
ToolIntRight.loadService("rosparam");
ToolIntRight.rosparam.getAll();
connect("ToolIntRight.CartesianPositionCommand", "CImp.ToolPositionCommand1", ConnPolicy())

loadComponent("ToolIntLeft", "CartesianInterpolator")
ToolIntLeft.configure();
ToolIntLeft.loadService("rosparam");
ToolIntLeft.rosparam.getAll();
connect("ToolIntLeft.CartesianPositionCommand", "CImp.ToolPositionCommand0", ConnPolicy())

loadComponent("TfPub", "TfPublisher")
setActivity("TfPub", 0.01, 1, ORO_SCHED_RT)
TfPub.loadService("rosparam");
TfPub.rosparam.getAll();
TfPub.configure();
connect("ToolIntRight.CartesianPositionCommand", "TfPub.In0", ConnPolicy())
connect("ToolIntLeft.CartesianPositionCommand", "TfPub.In1", ConnPolicy())
connect("PoseIntRight.CartesianPositionCommand", "TfPub.In2", ConnPolicy())
connect("PoseIntLeft.CartesianPositionCommand", "TfPub.In3", ConnPolicy())
stream("TfPub.OutTf", ros.comm.topic("/tf"))

loadComponent("TorquePubRight", "TorquePublisher")
setActivity("TorquePubRight", 0.01, 1, ORO_SCHED_RT)
connect("FRIr.JointTorque", "TorquePubRight.InJointTorque", ConnPolicy())
connect("Ts.Out1", "TorquePubRight.InJointTorqueCommand", ConnPolicy())
connect("FRIr.GravityTorque", "TorquePubRight.InGravityTorque", ConnPolicy())
TorquePubRight.configure();
stream("TorquePubRight.OutTorques", ros.comm.topic("/right_arm/torques"))

loadComponent("TorquePubLeft", "TorquePublisher")
setActivity("TorquePubLeft", 0.01, 1, ORO_SCHED_RT)
connect("FRIr.JointTorque", "TorquePubLeft.InJointTorque", ConnPolicy())
connect("Ts.Out1", "TorquePubLeft.InJointTorqueCommand", ConnPolicy())
connect("FRIr.GravityTorque", "TorquePubLeft.InGravityTorque", ConnPolicy())
TorquePubLeft.configure();
stream("TorquePubLeft.OutTorques", ros.comm.topic("/left_arm/torques"))

// impedance

loadComponent("ImpedanceIntRight", "CartesianImpedanceInterpolator");
connect("ImpedanceIntRight.CartesianImpedanceCommand", "CImp.CartesianImpedanceCommand0", ConnPolicy());

loadComponent("ImpedanceIntLeft", "CartesianImpedanceInterpolator");
connect("ImpedanceIntLeft.CartesianImpedanceCommand", "CImp.CartesianImpedanceCommand1", ConnPolicy());

loadComponent("JntImp", "JointImpedance")
JntImp.loadService("rosparam");
JntImp.rosparam.getAll();

connect("Jc.Out", "JntImp.JointPosition", ConnPolicy());
connect("Jvc.Out", "JntImp.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "JntImp.MassMatrix", ConnPolicy());
connect("JntImp.JointTorqueCommand", "Ts.In", ConnPolicy());

JntImp.configure();

loadComponent("FK", "VelmaFK");
FK.loadService("robot");
FK.configure();

connect("ToolIntLeft.CartesianPositionCommand", "FK.LeftToolCommand", ConnPolicy())
connect("ToolIntRight.CartesianPositionCommand", "FK.RightToolCommand", ConnPolicy())

connect("Jc.Out", "FK.JointPositionCommand", ConnPolicy())

connect("FK.LeftPositionCommand", "PoseIntLeft.CartesianPosition", ConnPolicy())
connect("FK.RightPositionCommand", "PoseIntRight.CartesianPosition", ConnPolicy())

connect("FK.RightPositionCommand", "TfPub.In4", ConnPolicy())
connect("FK.LeftPositionCommand", "TfPub.In5", ConnPolicy())

connect("FK.RightPositionCommand", "PT.PrimaryFrame1", ConnPolicy());
connect("FK.LeftPositionCommand", "PT.PrimaryFrame2", ConnPolicy());

loadComponent("TrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
TrajectoryGeneratorJoint.loadService("rosparam");
TrajectoryGeneratorJoint.rosparam.getAll();
connect("Jc.Out","TrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand","JntImp.JointPositionCommand", ConnPolicy())
TrajectoryGeneratorJoint.configure()

loadComponent("JntLimit", "JointLimitAvoidance");
JntLimit.loadService("rosparam");
JntLimit.rosparam.getAll();

connect("Jc.Out", "JntLimit.JointPosition", ConnPolicy());
connect("Jvc.Out", "JntLimit.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "JntLimit.MassMatrix", ConnPolicy());
connect("JntLimit.JointTorqueCommand", "CImp.NullSpaceTorqueCommand", ConnPolicy());

loadComponent("VG", "VelmaGrav");
VG.configure();

connect("FRIl.GravityTorque", "VG.GravTrqLeft", ConnPolicy());
connect("FRIr.GravityTorque", "VG.GravTrqRight", ConnPolicy());

connect("TJ.NullSpaceTorqueCommand", "JntLimit.NullSpaceTorqueCommand", ConnPolicy());
connect("VG.GravTrq", "JntLimit.NullSpaceTorqueCommand", ConnPolicy());

Ps.configure();
Jc.configure();
Vs.configure();
Jvc.configure();
Ts.configure();
Dwr.configure();
Dwl.configure();
PoseIntRight.configure();
PoseIntLeft.configure();
ImpedanceIntRight.configure()
ImpedanceIntLeft.configure()
JntLimit.configure();

addPeer("scheme", "Ps");
addPeer("scheme", "Jc");
addPeer("scheme", "Jvc");
addPeer("scheme", "Mass");
addPeer("scheme", "CImp");
addPeer("scheme", "Ts");
addPeer("scheme", "JntLimit");
addPeer("scheme", "PoseIntRight");
addPeer("scheme", "PoseIntLeft");
addPeer("scheme", "ImpedanceIntRight");
addPeer("scheme", "ImpedanceIntLeft");
addPeer("scheme", "VG");
addPeer("scheme", "ToolIntRight");
addPeer("scheme", "ToolIntLeft");
addPeer("scheme", "JntImp");
addPeer("scheme", "FK");
addPeer("scheme", "TrajectoryGeneratorJoint");

scheme.addBlock("Ps");
scheme.addBlock("Jc");
scheme.addBlock("Jvc");
scheme.addBlock("Mass");
scheme.addBlock("CImp");
scheme.addBlock("Ts");
scheme.addBlock("JntLimit");
scheme.addBlock("PoseIntRight");
scheme.addBlock("PoseIntLeft");
scheme.addBlock("ImpedanceIntRight");
scheme.addBlock("ImpedanceIntLeft");
scheme.latchConnections("CImp", "PoseIntRight", true);
scheme.latchConnections("CImp", "PoseIntLeft", true);
scheme.addBlock("VG");
scheme.addBlock("ToolIntRight");
scheme.addBlock("ToolIntLeft");
scheme.addBlock("JntImp");
scheme.addBlock("FK");
scheme.addBlock("TrajectoryGeneratorJoint");
//------------------------------------------------------------------------------
//-- ROS Diagnostics
//------------------------------------------------------------------------------

loadComponent("JntPub", "JointStatePublisher");
setActivity("JntPub", 0.01, 2, ORO_SCHED_RT);
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

connect("Jc.Out", "JntPub.JointPosition", ConnPolicy());
connect("Jvc.Out", "JntPub.JointVelocity", ConnPolicy());
connect("CImp.JointTorqueCommand", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));
stream("JntPub.joint_state", ros.comm.topic("/joint_states2"));

JntPub.configure()

//------------------------------------------------------------------------------
//-- ROS Command interface
//------------------------------------------------------------------------------
loadComponent("CartTrjRight", "CartesianTrajectoryAction");
setActivity("CartTrjRight", 0.01, 1, ORO_SCHED_RT);

connect("CartTrjRight.CartesianTrajectoryCommand", "PoseIntRight.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjRight.CartesianPositionCommand", "PoseIntRight.CartesianPositionCommand", ConnPolicy());
connect("CartTrjRight.CartesianWrench", "FRIr.CartesianWrench", ConnPolicy());
connect("FK.RightPositionCommand", "CartTrjRight.CartesianPosition", ConnPolicy())

stream("CartTrjRight.trajectory", ros.comm.topic("/right_arm/trajectory"));

CartTrjRight.configure();
CartTrjRight.loadService("actionlib")
CartTrjRight.actionlib.connect("/right_arm/cartesian_trajectory")

loadComponent("CartTrjLeft", "CartesianTrajectoryAction");
setActivity("CartTrjLeft", 0.01, 1, ORO_SCHED_RT);

connect("CartTrjLeft.CartesianTrajectoryCommand", "PoseIntLeft.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjLeft.CartesianPositionCommand", "PoseIntLeft.CartesianPositionCommand", ConnPolicy());
connect("CartTrjLeft.CartesianWrench", "FRIl.CartesianWrench", ConnPolicy());
connect("FK.LeftPositionCommand", "CartTrjLeft.CartesianPosition", ConnPolicy())

stream("CartTrjLeft.trajectory", ros.comm.topic("/left_arm/trajectory"));

CartTrjLeft.configure();
CartTrjLeft.loadService("actionlib")
CartTrjLeft.actionlib.connect("/left_arm/cartesian_trajectory")

// Joint

loadComponent("SplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivity("SplineTrajectoryActionJoint", 0.01 ,2 ,ORO_SCHED_RT)
SplineTrajectoryActionJoint.loadService("rosparam");
SplineTrajectoryActionJoint.rosparam.getAll();
SplineTrajectoryActionJoint.loadService("actionlib")
SplineTrajectoryActionJoint.actionlib.connect("/spline_trajectory_action_joint")
connect("SplineTrajectoryActionJoint.trajectoryPtr", "TrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("Jc.Out","SplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand", "SplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())
SplineTrajectoryActionJoint.configure()

// tool

loadComponent("CartToolRight", "CartesianTrajectoryAction");
setActivity("CartToolRight", 0.01, 1, ORO_SCHED_RT);
CartToolRight.configure()
CartToolRight.loadService("actionlib")
CartToolRight.actionlib.connect("/right_arm/tool_trajectory")
connect("CartToolRight.CartesianTrajectoryCommand","ToolIntRight.CartesianTrajectoryCommand", ConnPolicy())

loadComponent("CartToolLeft", "CartesianTrajectoryAction");
setActivity("CartToolLeft", 0.01, 1, ORO_SCHED_RT);
CartToolLeft.configure()
CartToolLeft.loadService("actionlib")
CartToolLeft.actionlib.connect("/left_arm/tool_trajectory")
connect("CartToolLeft.CartesianTrajectoryCommand","ToolIntLeft.CartesianTrajectoryCommand", ConnPolicy())

// impedance

loadComponent("CartImpRight", "CartesianImpedanceAction");
setActivity("CartImpRight", 0.01, 1, ORO_SCHED_RT);

connect("CartImpRight.CartesianImpedanceTrajectoryCommand", "ImpedanceIntRight.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpRight.impedance", ros.comm.topic("/right_arm/impedance"));

CartImpRight.configure();
CartImpRight.loadService("actionlib")
CartImpRight.actionlib.connect("/right_arm/cartesian_impedance")

loadComponent("CartImpLeft", "CartesianImpedanceAction");
setActivity("CartImpLeft", 0.01, 1, ORO_SCHED_RT);

connect("CartImpLeft.CartesianImpedanceTrajectoryCommand", "ImpedanceIntLeft.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpLeft.impedance", ros.comm.topic("/left_arm/impedance"));

CartImpLeft.configure();
CartImpLeft.loadService("actionlib")
CartImpLeft.actionlib.connect("/left_arm/cartesian_impedance")

//------------------------------------------------------------------------------

EC.start();
VT.start();
FRIr.start();
FRIl.start();

LWRrDiag.start();
LWRlDiag.start();

TJc.start();
TJ.start();
HL.start();
PT.start();

scheme.start();
Ps.start();
Vs.start();
Jc.start();
Jvc.start();
Ts.start();
Dwr.start();
Dwl.start();
Mass.start();
//CImp.start()
JntPub.start();
CartTrjRight.start();
CartTrjLeft.start();
ImpedanceIntRight.start();
ImpedanceIntLeft.start();
CartImpRight.start();
CartImpLeft.start();
//VG.start();
CartToolRight.start()
CartToolLeft.start()
ToolIntRight.start()
ToolIntLeft.start()
TGR.start()
TfPub.start()
TorquePubRight.start()
TorquePubLeft.start()
SplineTrajectoryActionJoint.start()
FK.start()
//waitForInterrupt()

