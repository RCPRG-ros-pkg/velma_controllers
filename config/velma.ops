import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");

ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
ros.import("velma_hardware");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");

//------------------------------------------------------------------------------
//-- Hardware interface
//------------------------------------------------------------------------------

loadComponent("FRIr", "FRIComponent");
setActivity("FRIr", 0.0, 6, ORO_SCHED_RT);
FRIr.loadService("rosparam");
FRIr.rosparam.getAll();

loadComponent("FRIl", "FRIComponent")
setActivity("FRIl", 0.0, 6, ORO_SCHED_RT)
FRIl.loadService("rosparam");
FRIl.rosparam.getAll();

loadComponent("VT", "VelmaTorso")
setActivity("VT", 0.001, 6, ORO_SCHED_RT)
VT.loadService("rosparam");
VT.rosparam.getAll();

FRIr.configure();
FRIl.configure();
VT.configure();

stream("FRIr.KRL_CMD", ros.comm.topic("/right_arm/KRL_CMD"));
stream("FRIl.KRL_CMD", ros.comm.topic("/left_arm/KRL_CMD"));

loadComponent("LWRrDiag", "FRIDiagnostics")
setActivity("LWRrDiag", 0.1, 1, ORO_SCHED_RT)
LWRrDiag.loadService("rosparam");
LWRrDiag.rosparam.getAll();

connect("FRIr.RobotState", "LWRrDiag.RobotState", ConnPolicy());
connect("FRIr.FRIState", "LWRrDiag.FRIState", ConnPolicy());
stream("LWRrDiag.Diagnostics", ros.comm.topic("/diagnostic"));
LWRrDiag.configure()

loadComponent("LWRlDiag", "FRIDiagnostics")
setActivity("LWRlDiag", 0.1, 1, ORO_SCHED_RT)
LWRlDiag.loadService("rosparam");
LWRlDiag.rosparam.getAll();

connect("FRIl.RobotState", "LWRlDiag.RobotState", ConnPolicy());
connect("FRIl.FRIState", "LWRlDiag.FRIState", ConnPolicy());
stream("LWRlDiag.Diagnostics", ros.comm.topic("/diagnostic"));
LWRlDiag.configure()

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.001, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

//------------------------------------------------------------------------------
//-- Torso Joystick Teleop
//------------------------------------------------------------------------------

loadComponent("TJ", "TorsoTeleopJoy")
setActivity("TJ", 0.001, 6, ORO_SCHED_RT)
TJ.loadService("rosparam");
TJ.rosparam.getAll();
TJ.configure();

connect("VT.JointPosition", "TJ.JointPosition", ConnPolicy());

loadComponent("TJc", "VectorConcate2");
setActivity("TJc", 0.001, 6, ORO_SCHED_RT)

connect("TJ.TorsoJointPositionCommand", "TJc.In0", ConnPolicy());
connect("TJ.HeadJointPositionCommand", "TJc.In1", ConnPolicy());
connect("TJc.Out", "VT.JointPositionCommand", ConnPolicy());
TJc.configure();

stream("TJ.Joy", ros.comm.topic("/joy"));

//------------------------------------------------------------------------------
//-- Velma controller
//------------------------------------------------------------------------------

loadComponent("Ps", "VectorSplit2");
Ps.loadService("rosparam");
Ps.rosparam.getAll();
connect("VT.JointPosition", "Ps.In", ConnPolicy());

loadComponent("Jc", "VectorConcate3");

connect("Ps.Out0", "Jc.In0", ConnPolicy());
connect("FRIr.JointPosition", "Jc.In1", ConnPolicy());
connect("FRIl.JointPosition", "Jc.In2", ConnPolicy());

loadComponent("Vs", "VectorSplit2");
Vs.loadService("rosparam");
Vs.rosparam.getAll();
connect("VT.JointVelocity", "Vs.In", ConnPolicy());

loadComponent("Jvc", "VectorConcate3");

connect("Vs.Out0", "Jvc.In0", ConnPolicy());
connect("FRIr.JointVelocity", "Jvc.In1", ConnPolicy());
connect("FRIl.JointVelocity", "Jvc.In2", ConnPolicy());

loadComponent("Ts", "VectorSplit3");
Ts.loadService("rosparam");
Ts.rosparam.getAll();

connect("Ts.Out0", "VT.JointTorqueCommand", ConnPolicy());
connect("Ts.Out1", "FRIr.JointTorqueCommand", ConnPolicy());
connect("Ts.Out2", "FRIl.JointTorqueCommand", ConnPolicy());


//loadComponent("Mass", "RobotMassMatrix");
loadComponent("Mass", "MassTest");
Mass.loadService("robot");
Mass.configure();

connect("Jc.Out", "Mass.JointPosition", ConnPolicy());
connect("FRIl.MassMatrix", "Mass.MassMatrixLeft", ConnPolicy());
connect("FRIr.MassMatrix", "Mass.MassMatrixRight", ConnPolicy());

loadComponent("CImp", "CartesianImpedance");
CImp.loadService("robot");
CImp.configure();

connect("Jc.Out", "CImp.JointPosition", ConnPolicy());
connect("Jvc.Out", "CImp.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "CImp.MassMatrixInv", ConnPolicy());

connect("CImp.JointTorqueCommand", "Ts.In", ConnPolicy());

loadComponent("PoseIntRight", "CartesianInterpolator");

connect("CImp.CartesianPosition0", "PoseIntRight.CartesianPosition", ConnPolicy());
connect("PoseIntRight.CartesianPositionCommand", "CImp.CartesianPositionCommand0", ConnPolicy());

loadComponent("PoseIntLeft", "CartesianInterpolator");

connect("CImp.CartesianPosition1", "PoseIntLeft.CartesianPosition", ConnPolicy());
connect("PoseIntLeft.CartesianPositionCommand", "CImp.CartesianPositionCommand1", ConnPolicy());

loadComponent("JntLimit", "JointLimitAvoidance");
JntLimit.loadService("rosparam");
JntLimit.rosparam.getAll();

connect("Jc.Out", "JntLimit.JointPosition", ConnPolicy());
connect("Jvc.Out", "JntLimit.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "JntLimit.MassMatrix", ConnPolicy());
connect("JntLimit.JointTorqueCommand", "CImp.NullSpaceTorqueCommand", ConnPolicy());

connect("TJ.NullSpaceTorqueCommand", "JntLimit.NullSpaceTorqueCommand", ConnPolicy());

Ps.configure();
Jc.configure();
Vs.configure();
Jvc.configure();
Ts.configure();
PoseIntRight.configure();
PoseIntLeft.configure();
JntLimit.configure();

addPeer("scheme", "Ps");
addPeer("scheme", "Jc");
addPeer("scheme", "Jvc");
addPeer("scheme", "Mass");
addPeer("scheme", "CImp");
addPeer("scheme", "Ts");
addPeer("scheme", "JntLimit");
addPeer("scheme", "PoseIntRight");
addPeer("scheme", "PoseIntLeft");

scheme.addBlock("Ps");
scheme.addBlock("Jc");
scheme.addBlock("Jvc");
scheme.addBlock("Mass");
scheme.addBlock("CImp");
scheme.addBlock("Ts");
scheme.addBlock("JntLimit");
scheme.addBlock("PoseIntRight");
scheme.addBlock("PoseIntLeft");
scheme.latchConnections("CImp", "PoseIntRight", true);
scheme.latchConnections("CImp", "PoseIntLeft", true);
//------------------------------------------------------------------------------
//-- ROS Diagnostics
//------------------------------------------------------------------------------

loadComponent("JntPub", "JointStatePublisher");
setActivity("JntPub", 0.01, 2, ORO_SCHED_RT);
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

connect("Jc.Out", "JntPub.JointPosition", ConnPolicy());
connect("Jvc.Out", "JntPub.JointVelocity", ConnPolicy());
connect("CImp.JointTorqueCommand", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));

JntPub.configure()

//------------------------------------------------------------------------------
//-- ROS Command interface
//------------------------------------------------------------------------------
loadComponent("CartTrjRight", "CartesianTrajectoryAction");
setActivity("CartTrjRight", 0.01, 1, ORO_SCHED_RT);

connect("CartTrjRight.CartesianTrajectoryCommand", "PoseIntRight.CartesianTrajectoryCommand", ConnPolicy());

stream("CartTrjRight.trajectory", ros.comm.topic("/right_arm/trajectory"));

CartTrjRight.configure();

loadComponent("CartTrjLeft", "CartesianTrajectoryAction");
setActivity("CartTrjLeft", 0.01, 1, ORO_SCHED_RT);

connect("CartTrjLeft.CartesianTrajectoryCommand", "PoseIntLeft.CartesianTrajectoryCommand", ConnPolicy());

stream("CartTrjLeft.trajectory", ros.comm.topic("/left_arm/trajectory"));

CartTrjLeft.configure();

//------------------------------------------------------------------------------


VT.start();
FRIr.start();
FRIl.start();

LWRrDiag.start();
LWRlDiag.start();

TJc.start();
TJ.start();

scheme.start();
Ps.start();
Vs.start();
Jc.start();
Jvc.start();
Ts.start();
Mass.start();
//CImp.start()
JntPub.start();
CartTrjRight.start();
CartTrjLeft.start();

/*
export void vstart()
   CImp.start()
   JntLimit.start()
   PoseIntRight.start()
end
*/

waitForInterrupt()

