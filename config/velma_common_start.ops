import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_rospack")
ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");

ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
ros.import("port_operations")



stream("Dwr.Out", ros.comm.topic("/right_arm/wrench"));
stream("Dwl.Out", ros.comm.topic("/left_arm/wrench"));

connect("Jc.Out", "Mass.JointPosition", ConnPolicy());

connect("HeadPanTransmisionInv.MotorPosition", "HeadPanVelocityLimiter.PositionIn", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorPosition", "HeadTiltVelocityLimiter.PositionIn", ConnPolicy())

rightHandMoveAction.configure();
rightHandMoveAction.loadService("actionlib");
rightHandMoveAction.actionlib.connect("/right_hand/move_hand");

leftHandMoveAction.configure();
leftHandMoveAction.loadService("actionlib");
leftHandMoveAction.actionlib.connect("/right_hand/move_hand");

stream("LWRrDiag.Diagnostics_OUTPORT", ros.comm.topic("/diagnostic"));
LWRrDiag.configure()

stream("LWRlDiag.Diagnostics_OUTPORT", ros.comm.topic("/diagnostic"));
LWRlDiag.configure()

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");

setActivityOnCPU("scheme", 0.001, 5, ORO_SCHED_RT, 3);

scheme.loadService("conman_ros");

scheme.configure();

//------------------------------------------------------------------------------
//-- Torso Joystick Teleop
//------------------------------------------------------------------------------

loadComponent("TJ", "TorsoTeleopJoy")
setActivityOnCPU("TJ", 0.01, 6, ORO_SCHED_RT, 0)
TJ.loadService("rosparam");
TJ.rosparam.getAll();
TJ.configure();

stream("TJ.Joy_INPORT", ros.comm.topic("/joy"));

//------------------------------------------------------------------------------
//-- Camera Trigger
//------------------------------------------------------------------------------

stream("TGR.TriggerStamp", ros.comm.topic("/camera_trigger_stamp"));

//------------------------------------------------------------------------------
//-- Velma controller
//------------------------------------------------------------------------------

// Head position aggregate
loadComponent("HeadPosAggregate","PortDoubleAggregate")
HeadPosAggregate.loadService("rosparam")
HeadPosAggregate.rosparam.getAll()
HeadPosAggregate.configure()

connect("HeadPosAggregate.InputPort_0", "HeadPanTransmision.JointPosition", ConnPolicy())
connect("HeadPosAggregate.InputPort_1", "HeadTiltTransmision.JointPosition", ConnPolicy())

// Head Velocity port aggregate
loadComponent("HeadVelAggregate","PortDoubleAggregate")
HeadVelAggregate.loadService("rosparam")
HeadVelAggregate.rosparam.getAll()
HeadVelAggregate.configure()

connect("HeadVelAggregate.InputPort_0", "HeadPanTransmision.JointVelocity", ConnPolicy())
connect("HeadVelAggregate.InputPort_1", "HeadTiltTransmision.JointVelocity", ConnPolicy())

// Head PositionCommand split

loadComponent("HeadPosSplit","PortDoubleSplit")
HeadPosSplit.loadService("rosparam")
HeadPosSplit.rosparam.getAll()
HeadPosSplit.configure()

connect("HeadPosSplit.OutputPort_0", "HeadPanTransmisionInv.JointPosition", ConnPolicy())
connect("HeadPosSplit.OutputPort_1", "HeadTiltTransmisionInv.JointPosition", ConnPolicy())

// Torso torque port spliter
loadComponent("TorsoTrqSplit","PortDoubleSplit")
TorsoTrqSplit.loadService("rosparam")
TorsoTrqSplit.rosparam.getAll()
TorsoTrqSplit.configure()

connect("TorsoTrqSplit.OutputPort_0", "TorsoPanTransmisionInv.JointTorque", ConnPolicy())

// Torso Position port aggregate
loadComponent("TorsoPosAggregate","PortDoubleAggregate")
TorsoPosAggregate.loadService("rosparam")
TorsoPosAggregate.rosparam.getAll()
TorsoPosAggregate.configure()

connect("TorsoPosAggregate.OutputPort", "Jc.In0", ConnPolicy());
connect("TorsoPosAggregate.InputPort_0", "TorsoPanTransmision.JointPosition", ConnPolicy())

// Torso Velocity port aggregate
loadComponent("TorsoVelAggregate","PortDoubleAggregate")
TorsoVelAggregate.loadService("rosparam")
TorsoVelAggregate.rosparam.getAll()
TorsoVelAggregate.configure()

connect("TorsoVelAggregate.OutputPort", "Jvc.In0", ConnPolicy());
connect("TorsoVelAggregate.InputPort_0", "TorsoPanTransmision.JointVelocity", ConnPolicy())

connect("Jc.Out", "JcAll.In0", ConnPolicy());
connect("HeadPosAggregate.OutputPort", "JcAll.In1", ConnPolicy());

connect("Jvc.Out", "JvcAll.In0", ConnPolicy());

connect("Ts.Out0", "TorsoTrqSplit.InputPort", ConnPolicy());

connect("HeadVelAggregate.OutputPort", "JvcAll.In1", ConnPolicy());

loadComponent("CImp", "CartesianImpedance");
CImp.loadService("robot");
CImp.configure();

connect("Jc.Out", "CImp.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "CImp.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix", "CImp.MassMatrixInv_INPORT", ConnPolicy());

connect("CImp.JointTorqueCommand_OUTPORT", "Ts.In", ConnPolicy());

loadComponent("PoseIntRight", "CartesianInterpolator");

connect("PoseIntRight.CartesianPositionCommand", "CImp.CartPositionCommand0_INPORT", ConnPolicy());

loadComponent("PoseIntLeft", "CartesianInterpolator");

connect("PoseIntLeft.CartesianPositionCommand", "CImp.CartPositionCommand1_INPORT", ConnPolicy());

// tool

loadComponent("ToolIntRight", "CartesianInterpolator")
ToolIntRight.configure();
ToolIntRight.loadService("rosparam");
ToolIntRight.rosparam.getAll();
connect("ToolIntRight.CartesianPositionCommand", "CImp.ToolPositionCommand0_INPORT", ConnPolicy())

loadComponent("ToolIntLeft", "CartesianInterpolator")
ToolIntLeft.configure();
ToolIntLeft.loadService("rosparam");
ToolIntLeft.rosparam.getAll();
connect("ToolIntLeft.CartesianPositionCommand", "CImp.ToolPositionCommand1_INPORT", ConnPolicy())

loadComponent("TfPub", "TfPublisher")
setActivityOnCPU("TfPub", 0.01, 1, ORO_SCHED_RT, 0)
TfPub.loadService("rosparam");
TfPub.rosparam.getAll();
TfPub.configure();
connect("ToolIntRight.CartesianPositionCommand", "TfPub.In0", ConnPolicy())
connect("ToolIntLeft.CartesianPositionCommand", "TfPub.In1", ConnPolicy())
connect("PoseIntRight.CartesianPositionCommand", "TfPub.In2", ConnPolicy())
connect("PoseIntLeft.CartesianPositionCommand", "TfPub.In3", ConnPolicy())
stream("TfPub.OutTf", ros.comm.topic("/tf"))

connect("Ts.Out1", "TorquePubRight.InJointTorqueCommand", ConnPolicy())
TorquePubRight.configure();
stream("TorquePubRight.OutTorques", ros.comm.topic("/right_arm/torques"))

connect("Ts.Out1", "TorquePubLeft.InJointTorqueCommand", ConnPolicy())
TorquePubLeft.configure();
stream("TorquePubLeft.OutTorques", ros.comm.topic("/left_arm/torques"))

// impedance

loadComponent("ImpedanceIntRight", "CartesianImpedanceInterpolator");
connect("ImpedanceIntRight.CartesianImpedanceCommand", "CImp.CartImpedanceCommand0_INPORT", ConnPolicy());

loadComponent("ImpedanceIntLeft", "CartesianImpedanceInterpolator");
connect("ImpedanceIntLeft.CartesianImpedanceCommand", "CImp.CartImpedanceCommand1_INPORT", ConnPolicy());

loadComponent("JntImp", "JointImpedance")
JntImp.loadService("rosparam");
JntImp.rosparam.getAll();

connect("Jc.Out", "JntImp.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "JntImp.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix", "JntImp.MassMatrix_INPORT", ConnPolicy());
connect("JntImp.JointTorqueCommand_OUTPORT", "Ts.In", ConnPolicy());

JntImp.configure();

loadComponent("FK", "VelmaFK");
FK.loadService("robot");
FK.configure();

connect("ToolIntLeft.CartesianPositionCommand", "FK.LeftToolCommand_INPORT", ConnPolicy())
connect("ToolIntRight.CartesianPositionCommand", "FK.RightToolCommand_INPORT", ConnPolicy())

connect("Jc.Out", "FK.JointPositionCommand_INPORT", ConnPolicy())

connect("FK.LeftPositionCommand_OUTPORT", "PoseIntLeft.CartesianPosition", ConnPolicy())
connect("FK.RightPositionCommand_OUTPORT", "PoseIntRight.CartesianPosition", ConnPolicy())

connect("FK.RightPositionCommand_OUTPORT", "TfPub.In4", ConnPolicy())
connect("FK.LeftPositionCommand_OUTPORT", "TfPub.In5", ConnPolicy())

loadComponent("TrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
TrajectoryGeneratorJoint.loadService("rosparam");
TrajectoryGeneratorJoint.rosparam.getAll();
connect("Jc.Out","TrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand","JntImp.JointPositionCommand_INPORT", ConnPolicy())
TrajectoryGeneratorJoint.configure()

loadComponent("JntLimit", "JointLimitAvoidance");
JntLimit.loadService("rosparam");
JntLimit.rosparam.getAll();

connect("Jc.Out", "JntLimit.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "JntLimit.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix", "JntLimit.MassMatrix_INPORT", ConnPolicy());
connect("JntLimit.JointTorqueCommand_OUTPORT", "CImp.NullSpaceTorqueCommand_INPORT", ConnPolicy());


//connect("TJ.NullSpaceTorqueCommand_OUTPORT", "JntLimit.NullSpaceTorqueCommand_INPORT", ConnPolicy());
connect("VG.GravTrq", "JntLimit.NullSpaceTorqueCommand_INPORT", ConnPolicy());

// head look-at

//loadComponent("HeadIK", "HeadLookAt3D")
//HeadIK.loadService("rosparam");
//HeadIK.rosparam.getAll();
//HeadIK.configure();

//loadComponent("PT", "PoseTransform")
//PT.loadService("rosparam");
//PT.rosparam.getAll();
//PT.configure();

//connect("PT.SecondaryTargetPoint", "HeadIK.TargetPoint_INPORT", ConnPolicy());

//if ((os.isenv("HEAD_JOY") == false) || (os.getenv("HEAD_JOY") == "true")) then {
//  connect("TJ.PrimaryFrameSelector_OUTPORT", "PT.PrimaryFrameSelector", ConnPolicy());
//  connect("TJ.HeadTargetPoint_OUTPORT", "PT.PrimaryTargetPoint", ConnPolicy());
//  connect("FK.RightPositionCommand_OUTPORT", "PT.PrimaryFrame1", ConnPolicy());
//  connect("FK.LeftPositionCommand_OUTPORT", "PT.PrimaryFrame2", ConnPolicy());
//  stream("PT.PrimaryTargetPassThrough", ros.comm.topic("/head_lookat_pose"));
//}
//else {
//    stream("HeadIK.TargetPoint_INPORT", ros.comm.topic("/head_lookat_pose"));
//}

//stream("PT.PrimaryTargetPoint", ros.comm.topic("/head_lookat_pose"));

//connect("HeadPosSplit.InputPort", "HeadIK.HeadJointPositionCommand_OUTPORT", ConnPolicy());
////connect("TorsoPosAggregate.OutputPort", "HeadIK.JointPosition_INPORT", ConnPolicy());




loadComponent("HeadTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
HeadTrajectoryGeneratorJoint.loadService("rosparam");
HeadTrajectoryGeneratorJoint.rosparam.getAll();
connect("HeadPosAggregate.OutputPort","HeadTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("HeadTrajectoryGeneratorJoint.JointPositionCommand","HeadPosSplit.InputPort", ConnPolicy())
HeadTrajectoryGeneratorJoint.configure()

// CONFIGURE
Jc.configure();
Jvc.configure();
JcAll.configure();
JvcAll.configure();
Ts.configure();
Dwr.configure();
Dwl.configure();
PoseIntRight.configure();
PoseIntLeft.configure();
ImpedanceIntRight.configure()
ImpedanceIntLeft.configure()
JntLimit.configure();

addPeer("scheme", "TorsoPanTransmision")
addPeer("scheme", "TorsoPanTransmisionInv")
addPeer("scheme", "HeadPanVelocityLimiter")
addPeer("scheme", "HeadTiltVelocityLimiter")
addPeer("scheme", "HeadPanTransmision")
addPeer("scheme", "HeadPanTransmisionInv")
addPeer("scheme", "HeadTiltTransmision")
addPeer("scheme", "HeadTiltTransmisionInv")
addPeer("scheme", "HeadPosAggregate")
addPeer("scheme", "HeadPosSplit")
addPeer("scheme", "TorsoTrqSplit")
addPeer("scheme", "TorsoPosAggregate")
addPeer("scheme", "TorsoVelAggregate")
addPeer("scheme", "Jc");
addPeer("scheme", "Jvc");
addPeer("scheme", "JcAll");
addPeer("scheme", "JvcAll");
addPeer("scheme", "Mass");
addPeer("scheme", "CImp");
addPeer("scheme", "Ts");
addPeer("scheme", "JntLimit");
addPeer("scheme", "PoseIntRight");
addPeer("scheme", "PoseIntLeft");
addPeer("scheme", "ImpedanceIntRight");
addPeer("scheme", "ImpedanceIntLeft");
addPeer("scheme", "VG");
addPeer("scheme", "ToolIntRight");
addPeer("scheme", "ToolIntLeft");
addPeer("scheme", "JntImp");
addPeer("scheme", "FK");
addPeer("scheme", "TrajectoryGeneratorJoint");
addPeer("scheme", "HeadTrajectoryGeneratorJoint");
//addPeer("scheme", "HeadIK");
//addPeer("scheme", "PT");

scheme.addBlock("TorsoPanTransmision");
scheme.addBlock("TorsoPanTransmisionInv");
scheme.addBlock("HeadPanVelocityLimiter");
scheme.addBlock("HeadTiltVelocityLimiter");
scheme.addBlock("HeadPanTransmision");
scheme.addBlock("HeadPanTransmisionInv");
scheme.addBlock("HeadTiltTransmision");
scheme.addBlock("HeadTiltTransmisionInv");
scheme.addBlock("HeadPosAggregate");
scheme.addBlock("HeadPosSplit");
scheme.addBlock("TorsoTrqSplit");
scheme.addBlock("TorsoPosAggregate");
scheme.addBlock("TorsoVelAggregate");
scheme.addBlock("Jc");
scheme.addBlock("Jvc");
scheme.addBlock("JcAll");
scheme.addBlock("JvcAll");
scheme.addBlock("Mass");
scheme.addBlock("CImp");
scheme.addBlock("Ts");
scheme.addBlock("JntLimit");
scheme.addBlock("PoseIntRight");
scheme.addBlock("PoseIntLeft");
scheme.addBlock("ImpedanceIntRight");
scheme.addBlock("ImpedanceIntLeft");
scheme.latchConnections("CImp", "PoseIntRight", true);
scheme.latchConnections("CImp", "PoseIntLeft", true);
scheme.addBlock("VG");
scheme.addBlock("ToolIntRight");
scheme.addBlock("ToolIntLeft");
scheme.addBlock("JntImp");
scheme.addBlock("FK");
scheme.addBlock("TrajectoryGeneratorJoint");
scheme.addBlock("HeadTrajectoryGeneratorJoint");
//scheme.addBlock("HeadIK");
//scheme.addBlock("PT")
//------------------------------------------------------------------------------
//-- ROS Diagnostics
//------------------------------------------------------------------------------

loadComponent("JntPub", "JointStatePublisher");
setActivityOnCPU("JntPub", 0.002, 2, ORO_SCHED_RT, 0);
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

connect("JcAll.Out", "JntPub.JointPosition", ConnPolicy());
connect("JvcAll.Out", "JntPub.JointVelocity", ConnPolicy());
connect("JvcAll.Out", "JntPub.JointEffort", ConnPolicy());
//connect("CImp.JointTorqueCommand_OUTPORT", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));
stream("JntPub.joint_state", ros.comm.topic("/joint_states2"));

JntPub.configure()

//------------------------------------------------------------------------------
//-- ROS Command interface
//------------------------------------------------------------------------------

connect("CartTrjRight.CartesianTrajectoryCommand", "PoseIntRight.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjRight.CartesianPositionCommand", "PoseIntRight.CartesianPositionCommand", ConnPolicy());
connect("FK.RightPositionCommand_OUTPORT", "CartTrjRight.CartesianPosition", ConnPolicy())

stream("CartTrjRight.trajectory", ros.comm.topic("/right_arm/trajectory"));

CartTrjRight.configure();
CartTrjRight.loadService("actionlib")
CartTrjRight.actionlib.connect("/right_arm/cartesian_trajectory")

connect("CartTrjLeft.CartesianTrajectoryCommand", "PoseIntLeft.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjLeft.CartesianPositionCommand", "PoseIntLeft.CartesianPositionCommand", ConnPolicy());
connect("FK.LeftPositionCommand_OUTPORT", "CartTrjLeft.CartesianPosition", ConnPolicy())

stream("CartTrjLeft.trajectory", ros.comm.topic("/left_arm/trajectory"));

CartTrjLeft.configure();
CartTrjLeft.loadService("actionlib")
CartTrjLeft.actionlib.connect("/left_arm/cartesian_trajectory")

// Joint

loadComponent("SplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivityOnCPU("SplineTrajectoryActionJoint", 0.01 ,2 ,ORO_SCHED_RT, 0)
SplineTrajectoryActionJoint.loadService("rosparam");
SplineTrajectoryActionJoint.rosparam.getAll();
SplineTrajectoryActionJoint.loadService("actionlib")
SplineTrajectoryActionJoint.actionlib.connect("/spline_trajectory_action_joint")
connect("SplineTrajectoryActionJoint.trajectoryPtr", "TrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("Jc.Out","SplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand", "SplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())
SplineTrajectoryActionJoint.configure()

loadComponent("HeadSplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivityOnCPU("HeadSplineTrajectoryActionJoint", 0.01 ,2 ,ORO_SCHED_RT, 0)
HeadSplineTrajectoryActionJoint.loadService("rosparam");
HeadSplineTrajectoryActionJoint.rosparam.getAll();
HeadSplineTrajectoryActionJoint.loadService("actionlib")
HeadSplineTrajectoryActionJoint.actionlib.connect("/head_spline_trajectory_action_joint")
connect("HeadSplineTrajectoryActionJoint.trajectoryPtr", "HeadTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("HeadPosAggregate.OutputPort","HeadSplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("HeadTrajectoryGeneratorJoint.JointPositionCommand", "HeadSplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())
HeadSplineTrajectoryActionJoint.configure()

// tool

loadComponent("CartToolRight", "CartesianTrajectoryAction");
setActivityOnCPU("CartToolRight", 0.01, 1, ORO_SCHED_RT, 0);
CartToolRight.configure()
CartToolRight.loadService("actionlib")
CartToolRight.actionlib.connect("/right_arm/tool_trajectory")
connect("CartToolRight.CartesianTrajectoryCommand","ToolIntRight.CartesianTrajectoryCommand", ConnPolicy())

loadComponent("CartToolLeft", "CartesianTrajectoryAction");
setActivityOnCPU("CartToolLeft", 0.01, 1, ORO_SCHED_RT, 0);
CartToolLeft.configure()
CartToolLeft.loadService("actionlib")
CartToolLeft.actionlib.connect("/left_arm/tool_trajectory")
connect("CartToolLeft.CartesianTrajectoryCommand","ToolIntLeft.CartesianTrajectoryCommand", ConnPolicy())

// impedance

loadComponent("CartImpRight", "CartesianImpedanceAction");
setActivityOnCPU("CartImpRight", 0.01, 1, ORO_SCHED_RT, 0);

connect("CartImpRight.CartesianImpedanceTrajectoryCommand_OUTPORT", "ImpedanceIntRight.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpRight.impedance_INPORT", ros.comm.topic("/right_arm/impedance"));

CartImpRight.configure();
CartImpRight.loadService("actionlib")
CartImpRight.actionlib.connect("/right_arm/cartesian_impedance")

loadComponent("CartImpLeft", "CartesianImpedanceAction");
setActivityOnCPU("CartImpLeft", 0.01, 1, ORO_SCHED_RT, 0);

connect("CartImpLeft.CartesianImpedanceTrajectoryCommand_OUTPORT", "ImpedanceIntLeft.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpLeft.impedance_INPORT", ros.comm.topic("/left_arm/impedance"));

CartImpLeft.configure();
CartImpLeft.loadService("actionlib")
CartImpLeft.actionlib.connect("/left_arm/cartesian_impedance")

//------------------------------------------------------------------------------

LWRrDiag.start();
LWRlDiag.start();

TJ.start();

scheme.start();
TorsoPanTransmision.start();
TorsoPanTransmisionInv.start();
HeadPanTransmision.start();
HeadPanTransmisionInv.start();
HeadTiltTransmision.start();
HeadTiltTransmisionInv.start();
HeadPosSplit.start();
TorsoTrqSplit.start();
TorsoPosAggregate.start();
TorsoVelAggregate.start();
HeadPosAggregate.start();
Jc.start();
Jvc.start();
JcAll.start();
JvcAll.start();
Ts.start();
Dwr.start();
Dwl.start();
Mass.start();
//CImp.start();
JntPub.start();
CartTrjRight.start();
CartTrjLeft.start();
ImpedanceIntRight.start();
ImpedanceIntLeft.start();
CartImpRight.start();
CartImpLeft.start();
//VG.start();
CartToolRight.start();
CartToolLeft.start();
ToolIntRight.start();
ToolIntLeft.start();
TGR.start();
TfPub.start();
TorquePubRight.start();
TorquePubLeft.start();
SplineTrajectoryActionJoint.start();
HeadSplineTrajectoryActionJoint.start();
FK.start();
rightHandMoveAction.start();
leftHandMoveAction.start();
HeadTrajectoryGeneratorJoint.start();
//PT.start()
//HeadIK.start()
//waitForInterrupt()


