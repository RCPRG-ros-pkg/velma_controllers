import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("barrett_hand_move_action");

ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("lwr_fri");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
ros.import("port_operations")


## Load a BarrettHand move action

loadComponent("rightHandMoveAction","BarrettHandMoveAction")
setActivityOnCPU("rightHandMoveAction", 0.01, 1, ORO_SCHED_RT, 0);
rightHandMoveAction.loadService("rosparam");
rightHandMoveAction.rosparam.getAll();

loadComponent("leftHandMoveAction","BarrettHandMoveAction")
setActivityOnCPU("leftHandMoveAction", 0.01, 1, ORO_SCHED_RT, 0);
leftHandMoveAction.loadService("rosparam");
leftHandMoveAction.rosparam.getAll();

## load diagnostics components for KUKA LWR

loadComponent("LWRrDiag", "FRIDiagnostics")
setActivityOnCPU("LWRrDiag", 0.1, 1, ORO_SCHED_RT, 0)
LWRrDiag.loadService("rosparam");
LWRrDiag.rosparam.getAll();

loadComponent("LWRlDiag", "FRIDiagnostics")
setActivityOnCPU("LWRlDiag", 0.1, 1, ORO_SCHED_RT, 0)
LWRlDiag.loadService("rosparam");
LWRlDiag.rosparam.getAll();

## load head command limiters

loadComponent("HeadPanVelocityLimiter", "VelocityLimiter");
HeadPanVelocityLimiter.loadService("rosparam");
HeadPanVelocityLimiter.rosparam.getAll();

loadComponent("HeadTiltVelocityLimiter", "VelocityLimiter");
HeadTiltVelocityLimiter.loadService("rosparam");
HeadTiltVelocityLimiter.rosparam.getAll();

## load torso transmisions

loadComponent("TorsoPanTransmision", "SimpleTransmision");
TorsoPanTransmision.loadService("rosparam");
TorsoPanTransmision.rosparam.getAll();

loadComponent("TorsoPanTransmisionInv", "SimpleTransmisionInv");
TorsoPanTransmisionInv.loadService("rosparam");
TorsoPanTransmisionInv.rosparam.getAll();

## load head transmisions

loadComponent("HeadPanTransmision", "SimpleTransmision");
HeadPanTransmision.loadService("rosparam");
HeadPanTransmision.rosparam.getAll();

loadComponent("HeadPanTransmisionInv", "SimpleTransmisionInv");
HeadPanTransmisionInv.loadService("rosparam");
HeadPanTransmisionInv.rosparam.getAll();

//tilt
loadComponent("HeadTiltTransmision", "SimpleTransmision");
HeadTiltTransmision.loadService("rosparam");
HeadTiltTransmision.rosparam.getAll();

loadComponent("HeadTiltTransmisionInv", "SimpleTransmisionInv");
HeadTiltTransmisionInv.loadService("rosparam");
HeadTiltTransmisionInv.rosparam.getAll();

## load vector concatenations and splits
// torqure controlled joint concate
loadComponent("Jc", "VectorConcate3");
loadComponent("Jvc", "VectorConcate3");
loadComponent("JcAll", "VectorConcate4");
loadComponent("JvcAll", "VectorConcate4");

loadComponent("Ts", "VectorSplit3");
Ts.loadService("rosparam");
Ts.rosparam.getAll();

## load wrench decimators
loadComponent("Dwr", "DecimatorWrench");
setActivityOnCPU("Dwr", 0.01, 1, ORO_SCHED_RT, 0)

loadComponent("Dwl", "DecimatorWrench");
setActivityOnCPU("Dwl", 0.01, 1, ORO_SCHED_RT, 0)

## load mass matrix component

//loadComponent("Mass", "RobotMassMatrix");
loadComponent("Mass", "MassTest");
Mass.loadService("robot");
Mass.configure();

## load torque publishers

loadComponent("TorquePubRight", "TorquePublisher")
setActivityOnCPU("TorquePubRight", 0.01, 1, ORO_SCHED_RT, 0)

loadComponent("TorquePubLeft", "TorquePublisher")
setActivityOnCPU("TorquePubLeft", 0.01, 1, ORO_SCHED_RT, 0)

## load gravity component

loadComponent("VG", "VelmaGrav");
VG.configure();

## load cartesian trajectory action
loadComponent("CartTrjRight", "CartesianTrajectoryAction");
setActivityOnCPU("CartTrjRight", 0.01, 1, ORO_SCHED_RT, 0);

loadComponent("CartTrjLeft", "CartesianTrajectoryAction");
setActivityOnCPU("CartTrjLeft", 0.01, 1, ORO_SCHED_RT, 0);

## load camera trigger

loadComponent("TGR", "TriggerGenerator");
setActivityOnCPU("TGR", 0.1, 2, ORO_SCHED_RT, 1);
TGR.configure();

