import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("internal_space_spline_trajectory_action");
ros.import("internal_space_spline_trajectory_generator");
ros.import("port_operations");
ros.import("velma_hardware");
ros.import("ec_hardware");
ros.import("ec_drivers");
ros.import("barrett_hand_controller");

//------------------------------------------------------------------------------
//-- Hardware interface
//------------------------------------------------------------------------------

## load hardware interface components

setActivityOnCPU("lwr_controller", 0, 1, ORO_SCHED_RT, 0)

loadComponent("FRIr", "FRIComponent");
setActivityOnCPU("FRIr", 0.0, 6, ORO_SCHED_RT, 3);
FRIr.loadService("rosparam");
FRIr.rosparam.getAll();

loadComponent("FRIl", "FRIComponent")
setActivityOnCPU("FRIl", 0.0, 6, ORO_SCHED_RT, 3)
FRIl.loadService("rosparam");
FRIl.rosparam.getAll();

loadComponent("EC","ECHardware")
setActivityOnCPU("EC", 0.001, 6, ORO_SCHED_RT, 3)
EC.loadService("rosparam")
EC.loadService("elmo_driver")
EC.loadService("ati_driver")
EC.rosparam.getAll()
EC.configure();

FRIr.configure();
FRIl.configure();

loadComponent("LeftHand","BarrettHand")
setActivity("LeftHand",0.001,3,ORO_SCHED_RT)
LeftHand.loadService("rosparam");
LeftHand.rosparam.getAll();
stream("LeftHand.BHTemp", ros.comm.topic("/left_hand/BHTemp"))
stream("LeftHand.reset_fingers", ros.comm.topic("/left_hand/reset_fingers"))

loadComponent("LeftHandForce","OptoforceComponent")
setActivity("LeftHandForce",0.001,3,ORO_SCHED_RT)
LeftHandForce.loadService("rosparam");
LeftHandForce.rosparam.getAll();
stream("LeftHandForce.force0_out", ros.comm.topic("/left_hand/optoforce/force0"))
stream("LeftHandForce.force1_out", ros.comm.topic("/left_hand/optoforce/force1"))
stream("LeftHandForce.force2_out", ros.comm.topic("/left_hand/optoforce/force2"))
stream("LeftHandForce.force0_scaled_out", ros.comm.topic("/left_hand/optoforce/force0_scaled"))
stream("LeftHandForce.force1_scaled_out", ros.comm.topic("/left_hand/optoforce/force1_scaled"))
stream("LeftHandForce.force2_scaled_out", ros.comm.topic("/left_hand/optoforce/force2_scaled"))
stream("LeftHandForce.tare_in", ros.comm.topic("/left_hand/optoforce/tare"))
connect("LeftHandForce.total_measured_force_out", "LeftHand.max_measured_pressure_in", ConnPolicy());

loadComponent("RightHand","BarrettHand")
setActivity("RightHand",0.001,3,ORO_SCHED_RT)
RightHand.loadService("rosparam");
RightHand.rosparam.getAll();
stream("RightHand.BHTemp", ros.comm.topic("/right_hand/BHTemp"))
stream("RightHand.reset_fingers", ros.comm.topic("/right_hand/reset_fingers"))

loadComponent("RightHandTact","BarrettHandTactile")
setActivity("RightHandTact",0.00625,3,ORO_SCHED_RT)
RightHandTact.loadService("rosparam");
RightHandTact.rosparam.getAll();
stream("RightHandTact.BHPressureState", ros.comm.topic("/right_hand/BHPressureState"))
stream("RightHandTact.calibrate_tactile_sensors", ros.comm.topic("/right_hand/calibrate_tactile_sensors"))
stream("RightHandTact.set_median_filter", ros.comm.topic("/right_hand/set_median_filter"))
stream("RightHandTact.tactile_info_out", ros.comm.topic("/right_hand/tactile_info_out"))
connect("RightHandTact.max_measured_pressure_out", "RightHand.max_measured_pressure_in", ConnPolicy());

LeftHand.configure()
LeftHandForce.configure()

RightHand.configure()
RightHandTact.configure()

void start_interface_components() {
    EC.start();
    FRIr.start();
    FRIl.start();
    LeftHand.start();
    LeftHandForce.start();
    RightHand.start();
    RightHandTact.start();
}


string rightHandPosition_INPORT_name()          { return string("RightHand.q_in"); }
string rightHandVelocity_INPORT_name()          { return string("RightHand.v_in"); }
string rightHandCurrent_INPORT_name()           { return string("RightHand.t_in"); }
string rightHandMaxPressure_INPORT_name()       { return string("RightHand.mp_in"); }
string rightHandHold_INPORT_name()              { return string("RightHand.hold_in"); }
string rightHandStatus_OUTPORT_name()           { return string("RightHand.status_out"); }
string rightHandJointPosition_OUTPORT_name()    { return string("RightHand.q_out"); }

string leftHandPosition_INPORT_name()           { return string("LeftHand.q_in"); }
string leftHandVelocity_INPORT_name()           { return string("LeftHand.v_in"); }
string leftHandCurrent_INPORT_name()            { return string("LeftHand.t_in"); }
string leftHandMaxPressure_INPORT_name()        { return string("LeftHand.mp_in"); }
string leftHandHold_INPORT_name()               { return string("LeftHand.hold_in"); }
string leftHandStatus_OUTPORT_name()            { return string("LeftHand.status_out"); }
string leftHandJointPosition_OUTPORT_name()     { return string("LeftHand.q_out"); }

string torsoMotorPosition_OUTPORT_name()        { return string("EC.torso_pan.motor_position"); }
string torsoMotorVelocity_OUTPORT_name()        { return string("EC.torso_pan.motor_velocity"); }
string torsoMotorCurrentCommand_INPORT_name()   { return string("EC.torso_pan.motor_current_command"); }

## camera trigger
//string torsoMotorPosition_OUTPORT_name()        { return string("TGR.Trigger", "EC.torso.subnode0.DigitalOutput1"); }
//string torsoMotorPosition_OUTPORT_name()        { return string("TGR.Trigger", "EC.torso.subnode0.DigitalOutput2"); }

string headPanMotorPosition_OUTPORT_name()        { return string("EC.head_pan.motor_position"); }
string headPanMotorVelocity_OUTPORT_name()        { return string("EC.head_pan.motor_velocity"); }
string headPanMotorPositionCommand_INPORT_name()  { return string("EC.head_pan.motor_position_command"); }
string headPanMotorVelocityCommand_INPORT_name()  { return string("EC.head_pan.motor_velocity_command"); }
string headPanMotorCurrentCommand_INPORT_name()   { return string("EC.head_pan.motor_current_command"); }

string headTiltMotorPosition_OUTPORT_name()       { return string("EC.head_tilt.motor_position"); }
string headTiltMotorVelocity_OUTPORT_name()       { return string("EC.head_tilt.motor_velocity"); }
string headTiltMotorPositionCommand_INPORT_name() { return string("EC.head_tilt.motor_position_command"); }
string headTiltMotorVelocityCommand_INPORT_name() { return string("EC.head_tilt.motor_velocity_command"); }
string headTiltMotorCurrentCommand_INPORT_name()  { return string("EC.head_tilt.motor_current_command"); }

string leftArmJointPosition_OUTPORT_name()        { return string("FRIl.JointPosition_OUTPORT"); }
string leftArmJointVelocity_OUTPORT_name()        { return string("FRIl.JointVelocity_OUTPORT"); }
string leftArmJointTorque_OUTPORT_name()          { return string("FRIl.JointTorque_OUTPORT"); }
string leftArmWrench_OUTPORT_name()               { return string("FRIl.CartesianWrench_OUTPORT"); }
string leftArmMassMatrix_OUTPORT_name()           { return string("FRIl.MassMatrix_OUTPORT"); }
string leftArmGravityTorque_OUTPORT_name()        { return string("FRIl.GravityTorque_OUTPORT"); }
string leftArmJointTorqueCommand_INPORT_name()    { return string("FRIl.JointTorqueCommand_INPORT"); }
string leftKRLcmd_INPORT_name()                   { return string("FRIl.KRL_CMD_INPORT"); }
string leftArmRobotState_OUTPORT_name()           { return string("FRIl.RobotState_OUTPORT"); }
string leftArmFRIState_OUTPORT_name()             { return string("FRIl.FRIState_OUTPORT"); }

string rightArmJointPosition_OUTPORT_name()       { return string("FRIr.JointPosition_OUTPORT"); }
string rightArmJointVelocity_OUTPORT_name()       { return string("FRIr.JointVelocity_OUTPORT"); }
string rightArmJointTorque_OUTPORT_name()         { return string("FRIr.JointTorque_OUTPORT"); }
string rightArmWrench_OUTPORT_name()              { return string("FRIr.CartesianWrench_OUTPORT"); }
string rightArmMassMatrix_OUTPORT_name()          { return string("FRIr.MassMatrix_OUTPORT"); }
string rightArmGravityTorque_OUTPORT_name()       { return string("FRIr.GravityTorque_OUTPORT"); }
string rightArmJointTorqueCommand_INPORT_name()   { return string("FRIr.JointTorqueCommand_INPORT"); }
string rightKRLcmd_INPORT_name()                  { return string("FRIr.KRL_CMD_INPORT"); }
string rightArmRobotState_OUTPORT_name()          { return string("FRIr.RobotState_OUTPORT"); }
string rightArmFRIState_OUTPORT_name()            { return string("FRIr.FRIState_OUTPORT"); }

