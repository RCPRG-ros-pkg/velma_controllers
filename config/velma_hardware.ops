import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("internal_space_spline_trajectory_action");
ros.import("internal_space_spline_trajectory_generator");
ros.import("port_operations");
ros.import("velma_hardware");
ros.import("ec_hardware");
ros.import("ec_drivers");
ros.import("barrett_hand_controller");

//------------------------------------------------------------------------------
//-- Hardware interface
//------------------------------------------------------------------------------

## load hardware interface components

setActivityOnCPU("lwr_controller", 0, 1, ORO_SCHED_RT, 0)

loadComponent("FRIr", "FRIComponent");
setActivityOnCPU("FRIr", 0.0, 6, ORO_SCHED_RT, 3);
FRIr.loadService("rosparam");
FRIr.rosparam.getAll();

loadComponent("FRIl", "FRIComponent")
setActivityOnCPU("FRIl", 0.0, 6, ORO_SCHED_RT, 3)
FRIl.loadService("rosparam");
FRIl.rosparam.getAll();

loadComponent("EC","ECHardware")
setActivityOnCPU("EC", 0.001, 6, ORO_SCHED_RT, 3)
EC.loadService("rosparam")
EC.loadService("elmo_driver")
EC.loadService("ati_driver")
EC.rosparam.getAll()
EC.configure();

FRIr.configure();
FRIl.configure();

loadComponent("LeftHand","BarrettHand")
setActivity("LeftHand",0.001,3,ORO_SCHED_RT)
LeftHand.loadService("rosparam");
LeftHand.rosparam.getAll();
stream("LeftHand.BHTemp", ros.comm.topic("/left_hand/BHTemp"))
stream("LeftHand.reset_fingers", ros.comm.topic("/left_hand/reset_fingers"))

loadComponent("LeftHandForce","OptoforceComponent")
setActivity("LeftHandForce",0.001,3,ORO_SCHED_RT)
LeftHandForce.loadService("rosparam");
LeftHandForce.rosparam.getAll();
stream("LeftHandForce.force0_out", ros.comm.topic("/left_hand/optoforce/force0"))
stream("LeftHandForce.force1_out", ros.comm.topic("/left_hand/optoforce/force1"))
stream("LeftHandForce.force2_out", ros.comm.topic("/left_hand/optoforce/force2"))
stream("LeftHandForce.force0_scaled_out", ros.comm.topic("/left_hand/optoforce/force0_scaled"))
stream("LeftHandForce.force1_scaled_out", ros.comm.topic("/left_hand/optoforce/force1_scaled"))
stream("LeftHandForce.force2_scaled_out", ros.comm.topic("/left_hand/optoforce/force2_scaled"))
stream("LeftHandForce.tare_in", ros.comm.topic("/left_hand/optoforce/tare"))
connect("LeftHandForce.total_measured_force_out", "LeftHand.max_measured_pressure_in", ConnPolicy());

loadComponent("RightHand","BarrettHand")
setActivity("RightHand",0.001,3,ORO_SCHED_RT)
RightHand.loadService("rosparam");
RightHand.rosparam.getAll();
stream("RightHand.BHTemp", ros.comm.topic("/right_hand/BHTemp"))
stream("RightHand.reset_fingers", ros.comm.topic("/right_hand/reset_fingers"))

loadComponent("RightHandTact","BarrettHandTactile")
setActivity("RightHandTact",0.00625,3,ORO_SCHED_RT)
RightHandTact.loadService("rosparam");
RightHandTact.rosparam.getAll();
stream("RightHandTact.BHPressureState", ros.comm.topic("/right_hand/BHPressureState"))
stream("RightHandTact.calibrate_tactile_sensors", ros.comm.topic("/right_hand/calibrate_tactile_sensors"))
stream("RightHandTact.set_median_filter", ros.comm.topic("/right_hand/set_median_filter"))
stream("RightHandTact.tactile_info_out", ros.comm.topic("/right_hand/tactile_info_out"))
connect("RightHandTact.max_measured_pressure_out", "RightHand.max_measured_pressure_in", ConnPolicy());

LeftHand.configure()
LeftHandForce.configure()

RightHand.configure()
RightHandTact.configure()

## LWR commands

stream("FRIr.KRL_CMD_INPORT", ros.comm.topic("/right_arm/KRL_CMD"));
stream("FRIl.KRL_CMD_INPORT", ros.comm.topic("/left_arm/KRL_CMD"));

## move hand action

connect("rightHandMoveAction.q_out", "RightHand.q_in", ConnPolicy());
connect("rightHandMoveAction.v_out", "RightHand.v_in", ConnPolicy());
connect("rightHandMoveAction.t_out", "RightHand.t_in", ConnPolicy());
connect("rightHandMoveAction.mp_out", "RightHand.mp_in", ConnPolicy());
connect("rightHandMoveAction.hold_out", "RightHand.hold_in", ConnPolicy());
connect("RightHand.status_out", "rightHandMoveAction.status_in", ConnPolicy());

connect("leftHandMoveAction.q_out", "LeftHand.q_in", ConnPolicy());
connect("leftHandMoveAction.v_out", "LeftHand.v_in", ConnPolicy());
connect("leftHandMoveAction.t_out", "LeftHand.t_in", ConnPolicy());
connect("leftHandMoveAction.mp_out", "LeftHand.mp_in", ConnPolicy());
connect("leftHandMoveAction.hold_out", "LeftHand.hold_in", ConnPolicy());
connect("LeftHand.status_out", "leftHandMoveAction.status_in", ConnPolicy());

## LWR diagnostics

connect("FRIr.RobotState_OUTPORT", "LWRrDiag.RobotState_INPORT", ConnPolicy());
connect("FRIr.FRIState_OUTPORT", "LWRrDiag.FRIState_INPORT", ConnPolicy());

connect("FRIl.RobotState_OUTPORT", "LWRlDiag.RobotState_INPORT", ConnPolicy());
connect("FRIl.FRIState_OUTPORT", "LWRlDiag.FRIState_INPORT", ConnPolicy());

## torso transmision

connect("TorsoPanTransmision.MotorPosition", "EC.torso_pan.motor_position", ConnPolicy());
connect("TorsoPanTransmision.MotorVelocity", "EC.torso_pan.motor_velocity", ConnPolicy());
connect("TorsoPanTransmisionInv.MotorCurrent", "EC.torso_pan.motor_current_command", ConnPolicy())

## camera trigger

//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput1", ConnPolicy());
//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput2", ConnPolicy());

## head command limiters

connect("HeadPanVelocityLimiter.PositionMsr", "EC.head_pan.motor_position", ConnPolicy());
connect("HeadPanVelocityLimiter.PositionOut", "EC.head_pan.motor_position_command", ConnPolicy());

connect("HeadTiltVelocityLimiter.PositionMsr", "EC.head_tilt.motor_position", ConnPolicy());
connect("HeadTiltVelocityLimiter.PositionOut", "EC.head_tilt.motor_position_command", ConnPolicy());

## head transmisions

connect("HeadPanTransmision.MotorPosition", "EC.head_pan.motor_position", ConnPolicy());
connect("HeadPanTransmision.MotorVelocity", "EC.head_pan.motor_velocity", ConnPolicy());

connect("HeadPanTransmisionInv.MotorCurrent", "EC.head_pan.motor_current_command", ConnPolicy())
connect("HeadPanTransmisionInv.MotorVelocity", "EC.head_pan.motor_velocity_command", ConnPolicy())

connect("HeadTiltTransmision.MotorPosition", "EC.head_tilt.motor_position", ConnPolicy());
connect("HeadTiltTransmision.MotorVelocity", "EC.head_tilt.motor_velocity", ConnPolicy());

connect("HeadTiltTransmisionInv.MotorCurrent", "EC.head_tilt.motor_current_command", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorVelocity", "EC.head_tilt.motor_velocity_command", ConnPolicy())

## vector concatenations and splits

connect("FRIr.JointPosition_OUTPORT", "Jc.In1", ConnPolicy());
connect("FRIl.JointPosition_OUTPORT", "Jc.In2", ConnPolicy());

connect("FRIr.JointVelocity_OUTPORT", "Jvc.In1", ConnPolicy());
connect("FRIl.JointVelocity_OUTPORT", "Jvc.In2", ConnPolicy());

connect("RightHand.q_out", "JcAll.In2", ConnPolicy());
connect("LeftHand.q_out", "JcAll.In3", ConnPolicy());

connect("RightHand.q_out", "JvcAll.In2", ConnPolicy());
connect("LeftHand.q_out", "JvcAll.In3", ConnPolicy());

connect("Ts.Out1", "FRIr.JointTorqueCommand_INPORT", ConnPolicy());
connect("Ts.Out2", "FRIl.JointTorqueCommand_INPORT", ConnPolicy());

## wrench decimators

connect("Dwr.In", "FRIr.CartesianWrench_OUTPORT", ConnPolicy());
connect("Dwl.In", "FRIl.CartesianWrench_OUTPORT", ConnPolicy());

## mass matrix component

connect("FRIl.MassMatrix_OUTPORT", "Mass.MassMatrixLeft", ConnPolicy());
connect("FRIr.MassMatrix_OUTPORT", "Mass.MassMatrixRight", ConnPolicy());

## torque publishers

connect("FRIr.JointTorque_OUTPORT", "TorquePubRight.InJointTorque", ConnPolicy())
connect("FRIr.GravityTorque_OUTPORT", "TorquePubRight.InGravityTorque", ConnPolicy())

connect("FRIl.JointTorque_OUTPORT", "TorquePubLeft.InJointTorque", ConnPolicy())
connect("FRIl.GravityTorque_OUTPORT", "TorquePubLeft.InGravityTorque", ConnPolicy())

## gravity component

connect("FRIl.GravityTorque_OUTPORT", "VG.GravTrqLeft", ConnPolicy());
connect("FRIr.GravityTorque_OUTPORT", "VG.GravTrqRight", ConnPolicy());

## cartesian trajectory action

connect("CartTrjRight.CartesianWrench", "FRIr.CartesianWrench_OUTPORT", ConnPolicy());
connect("CartTrjLeft.CartesianWrench", "FRIl.CartesianWrench_OUTPORT", ConnPolicy());

## start hardware interface components

EC.start();
FRIr.start();
FRIl.start();
LeftHand.start();
LeftHandForce.start();
RightHand.start();
RightHandTact.start();

