import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_rospack")
ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("barrett_hand_move_action");

ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
ros.import("port_operations")
ros.import("force_control");
ros.import("rtt_force_control_msgs");

// dot graph generation
ros.import("rtt_dot_service")
loadService("gazebo","dot")

## Load a BarrettHand move action

loadComponent("rightHandMoveAction","BarrettHandMoveAction")
setActivityOnCPU("rightHandMoveAction", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { rightHandMoveAction.loadService("sim_clock_activity") }
rightHandMoveAction.loadService("rosparam");
rightHandMoveAction.rosparam.getAll();

loadComponent("leftHandMoveAction","BarrettHandMoveAction")
setActivityOnCPU("leftHandMoveAction", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { leftHandMoveAction.loadService("sim_clock_activity") }
leftHandMoveAction.loadService("rosparam");
leftHandMoveAction.rosparam.getAll();

## load diagnostics components for KUKA LWR

loadComponent("LWRrDiag", "FRIDiagnostics")
setActivityOnCPU("LWRrDiag", 0.1, 1, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { LWRrDiag.loadService("sim_clock_activity") }
LWRrDiag.loadService("rosparam");
LWRrDiag.rosparam.getAll();

loadComponent("LWRlDiag", "FRIDiagnostics")
setActivityOnCPU("LWRlDiag", 0.1, 1, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { LWRlDiag.loadService("sim_clock_activity") }
LWRlDiag.loadService("rosparam");
LWRlDiag.rosparam.getAll();

## load head command limiters

loadComponent("HeadPanVelocityLimiter", "VelocityLimiter");
HeadPanVelocityLimiter.loadService("rosparam");
HeadPanVelocityLimiter.rosparam.getAll();

loadComponent("HeadTiltVelocityLimiter", "VelocityLimiter");
HeadTiltVelocityLimiter.loadService("rosparam");
HeadTiltVelocityLimiter.rosparam.getAll();

## load torso transmisions

loadComponent("TorsoPanTransmision", "SimpleTransmision");
TorsoPanTransmision.loadService("rosparam");
TorsoPanTransmision.rosparam.getAll();

loadComponent("TorsoPanTransmisionInv", "SimpleTransmisionInv");
TorsoPanTransmisionInv.loadService("rosparam");
TorsoPanTransmisionInv.rosparam.getAll();

## load head transmisions

loadComponent("HeadPanTransmision", "SimpleTransmision");
HeadPanTransmision.loadService("rosparam");
HeadPanTransmision.rosparam.getAll();

loadComponent("HeadPanTransmisionInv", "SimpleTransmisionInv");
HeadPanTransmisionInv.loadService("rosparam");
HeadPanTransmisionInv.rosparam.getAll();

//tilt
loadComponent("HeadTiltTransmision", "SimpleTransmision");
HeadTiltTransmision.loadService("rosparam");
HeadTiltTransmision.rosparam.getAll();

loadComponent("HeadTiltTransmisionInv", "SimpleTransmisionInv");
HeadTiltTransmisionInv.loadService("rosparam");
HeadTiltTransmisionInv.rosparam.getAll();

## load vector concatenations and splits
// torqure controlled joint concate
loadComponent("Jc", "VectorConcate3");
loadComponent("Jvc", "VectorConcate3");
loadComponent("JcAll", "VectorConcate4");
loadComponent("JvcAll", "VectorConcate4");

loadComponent("Ts", "VectorSplit3");
Ts.loadService("rosparam");
Ts.rosparam.getAll();

## load wrench decimators
loadComponent("Dwr", "DecimatorWrench");
setActivityOnCPU("Dwr", 0.01, 1, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { Dwr.loadService("sim_clock_activity") }

loadComponent("Dwl", "DecimatorWrench");
setActivityOnCPU("Dwl", 0.01, 1, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { Dwl.loadService("sim_clock_activity") }

## load mass matrix component

//loadComponent("Mass", "RobotMassMatrix");
loadComponent("Mass", "MassTest");
Mass.loadService("robot");
Mass.configure();

## load torque publishers

loadComponent("TorquePubRight", "TorquePublisher")
setActivityOnCPU("TorquePubRight", 0.01, 1, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { TorquePubRight.loadService("sim_clock_activity") }

loadComponent("TorquePubLeft", "TorquePublisher")
setActivityOnCPU("TorquePubLeft", 0.01, 1, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { TorquePubLeft.loadService("sim_clock_activity") }

## load gravity component

loadComponent("VG", "VelmaGrav");
VG.configure();

## load cartesian trajectory action
loadComponent("CartTrjRight", "CartesianTrajectoryAction");
setActivityOnCPU("CartTrjRight", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { CartTrjRight.loadService("sim_clock_activity") }

loadComponent("CartTrjLeft", "CartesianTrajectoryAction");
setActivityOnCPU("CartTrjLeft", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { CartTrjLeft.loadService("sim_clock_activity") }

## load camera trigger

loadComponent("TGR", "TriggerGenerator");
setActivityOnCPU("TGR", 0.1, 2, ORO_SCHED_RT, 1);
if (useSimulationTime()) then { TGR.loadService("sim_clock_activity") }
TGR.configure();

##
## connect to the interface components
##

## LWR commands

stream(rightKRLcmd_INPORT_name(), ros.comm.topic("/right_arm/KRL_CMD"));
stream(leftKRLcmd_INPORT_name(), ros.comm.topic("/left_arm/KRL_CMD"));

## move hand action

connect("rightHandMoveAction.q_OUTPORT", rightHandPosition_INPORT_name(), ConnPolicy());
connect("rightHandMoveAction.v_OUTPORT", rightHandVelocity_INPORT_name(), ConnPolicy());
connect("rightHandMoveAction.t_OUTPORT", rightHandCurrent_INPORT_name(), ConnPolicy());
connect("rightHandMoveAction.mp_OUTPORT", rightHandMaxPressure_INPORT_name(), ConnPolicy());
connect("rightHandMoveAction.hold_OUTPORT", rightHandHold_INPORT_name(), ConnPolicy());
connect(rightHandStatus_OUTPORT_name(), "rightHandMoveAction.status_INPORT", ConnPolicy());

connect("leftHandMoveAction.q_OUTPORT", leftHandPosition_INPORT_name(), ConnPolicy());
connect("leftHandMoveAction.v_OUTPORT", leftHandVelocity_INPORT_name(), ConnPolicy());
connect("leftHandMoveAction.t_OUTPORT", leftHandCurrent_INPORT_name(), ConnPolicy());
connect("leftHandMoveAction.mp_OUTPORT", leftHandMaxPressure_INPORT_name(), ConnPolicy());
connect("leftHandMoveAction.hold_OUTPORT", leftHandHold_INPORT_name(), ConnPolicy());
connect(leftHandStatus_OUTPORT_name(), "leftHandMoveAction.status_INPORT", ConnPolicy());

## LWR diagnostics

connect(rightArmRobotState_OUTPORT_name(), "LWRrDiag.RobotState_INPORT", ConnPolicy());
connect(rightArmFRIState_OUTPORT_name(), "LWRrDiag.FRIState_INPORT", ConnPolicy());

connect(leftArmRobotState_OUTPORT_name(), "LWRlDiag.RobotState_INPORT", ConnPolicy());
connect(leftArmFRIState_OUTPORT_name(), "LWRlDiag.FRIState_INPORT", ConnPolicy());

## torso transmision

connect("TorsoPanTransmision.MotorPosition", torsoMotorPosition_OUTPORT_name(), ConnPolicy());
connect("TorsoPanTransmision.MotorVelocity", torsoMotorVelocity_OUTPORT_name(), ConnPolicy());
connect("TorsoPanTransmisionInv.MotorCurrent", torsoMotorCurrentCommand_INPORT_name(), ConnPolicy())


## camera trigger

//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput1", ConnPolicy());
//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput2", ConnPolicy());

## head command limiters

connect("HeadPanVelocityLimiter.PositionMsr", headPanMotorPosition_OUTPORT_name(), ConnPolicy());
connect("HeadPanVelocityLimiter.PositionOut", headPanMotorPositionCommand_INPORT_name(), ConnPolicy());

connect("HeadTiltVelocityLimiter.PositionMsr", headTiltMotorPosition_OUTPORT_name(), ConnPolicy());
connect("HeadTiltVelocityLimiter.PositionOut", headTiltMotorPositionCommand_INPORT_name(), ConnPolicy());

## head transmisions

connect("HeadPanTransmision.MotorPosition", headPanMotorPosition_OUTPORT_name(), ConnPolicy());
connect("HeadPanTransmision.MotorVelocity", headPanMotorVelocity_OUTPORT_name(), ConnPolicy());

connect("HeadPanTransmisionInv.MotorCurrent", headPanMotorCurrentCommand_INPORT_name(), ConnPolicy())
connect("HeadPanTransmisionInv.MotorVelocity", headPanMotorVelocityCommand_INPORT_name(), ConnPolicy())

connect("HeadTiltTransmision.MotorPosition", headTiltMotorPosition_OUTPORT_name(), ConnPolicy());
connect("HeadTiltTransmision.MotorVelocity", headTiltMotorVelocity_OUTPORT_name(), ConnPolicy());

connect("HeadTiltTransmisionInv.MotorCurrent", headTiltMotorCurrentCommand_INPORT_name(), ConnPolicy())
connect("HeadTiltTransmisionInv.MotorVelocity", headTiltMotorVelocityCommand_INPORT_name(), ConnPolicy())

## vector concatenations and splits

connect(rightArmJointPosition_OUTPORT_name(), "Jc.In1", ConnPolicy());
connect(leftArmJointPosition_OUTPORT_name(), "Jc.In2", ConnPolicy());

connect(rightArmJointVelocity_OUTPORT_name(), "Jvc.In1", ConnPolicy());
connect(leftArmJointVelocity_OUTPORT_name(), "Jvc.In2", ConnPolicy());

connect(rightHandJointPosition_OUTPORT_name(), "JcAll.In2", ConnPolicy());
connect(leftHandJointPosition_OUTPORT_name(), "JcAll.In3", ConnPolicy());

connect(rightHandJointPosition_OUTPORT_name(), "JvcAll.In2", ConnPolicy());
connect(leftHandJointPosition_OUTPORT_name(), "JvcAll.In3", ConnPolicy());

connect("Ts.Out1", rightArmJointTorqueCommand_INPORT_name(), ConnPolicy());
connect("Ts.Out2", leftArmJointTorqueCommand_INPORT_name(), ConnPolicy());

## wrench decimators

connect("Dwr.In", rightArmWrench_OUTPORT_name(), ConnPolicy());
connect("Dwl.In", leftArmWrench_OUTPORT_name(), ConnPolicy());

## mass matrix component

connect(leftArmMassMatrix_OUTPORT_name() , "Mass.MassMatrixLeft", ConnPolicy());
connect(rightArmMassMatrix_OUTPORT_name() , "Mass.MassMatrixRight", ConnPolicy());

## torque publishers

connect(rightArmJointTorque_OUTPORT_name(), "TorquePubRight.InJointTorque", ConnPolicy())
connect(rightArmGravityTorque_OUTPORT_name(), "TorquePubRight.InGravityTorque", ConnPolicy())

connect(leftArmJointTorque_OUTPORT_name(), "TorquePubLeft.InJointTorque", ConnPolicy())
connect(leftArmGravityTorque_OUTPORT_name(), "TorquePubLeft.InGravityTorque", ConnPolicy())

## gravity component

connect(leftArmGravityTorque_OUTPORT_name(), "VG.GravTrqLeft", ConnPolicy());
connect(rightArmGravityTorque_OUTPORT_name(), "VG.GravTrqRight", ConnPolicy());

## cartesian trajectory action

connect("CartTrjRight.CartesianWrench", rightArmWrench_OUTPORT_name(), ConnPolicy());
connect("CartTrjLeft.CartesianWrench", leftArmWrench_OUTPORT_name(), ConnPolicy());

##
## start interface components
##

start_interface_components();

##

#stream(rightArmWrench_OUTPORT_name(), ros.comm.topic("/right_arm/wrench"));
#stream(leftArmWrench_OUTPORT_name(), ros.comm.topic("/left_arm/wrench"));
stream("Dwr.Out", ros.comm.topic("/right_arm/wrench"));
stream("Dwl.Out", ros.comm.topic("/left_arm/wrench"));

connect("Jc.Out", "Mass.JointPosition", ConnPolicy());

connect("HeadPanTransmisionInv.MotorPosition", "HeadPanVelocityLimiter.PositionIn", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorPosition", "HeadTiltVelocityLimiter.PositionIn", ConnPolicy())

rightHandMoveAction.configure();
rightHandMoveAction.loadService("actionlib");
rightHandMoveAction.actionlib.connect("/right_hand/move_hand");

leftHandMoveAction.configure();
leftHandMoveAction.loadService("actionlib");
leftHandMoveAction.actionlib.connect("/left_hand/move_hand");

stream("LWRrDiag.Diagnostics_OUTPORT", ros.comm.topic("/diagnostic"));
LWRrDiag.configure()

stream("LWRlDiag.Diagnostics_OUTPORT", ros.comm.topic("/diagnostic"));
LWRlDiag.configure()

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");

setActivityOnCPU("scheme", 0.001, 5, ORO_SCHED_RT, 3);
if (useSimulationTime()) then { scheme.loadService("sim_clock_activity") }

scheme.loadService("conman_ros");

scheme.configure();

//------------------------------------------------------------------------------
//-- Torso Joystick Teleop
//------------------------------------------------------------------------------

loadComponent("TJ", "TorsoTeleopJoy")
setActivityOnCPU("TJ", 0.01, 6, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { TJ.loadService("sim_clock_activity") }
TJ.loadService("rosparam");
TJ.rosparam.getAll();
TJ.configure();

stream("TJ.Joy_INPORT", ros.comm.topic("/joy"));

//------------------------------------------------------------------------------
//-- Camera Trigger
//------------------------------------------------------------------------------

stream("TGR.TriggerStamp", ros.comm.topic("/camera_trigger_stamp"));

//------------------------------------------------------------------------------
//-- Velma controller
//------------------------------------------------------------------------------

// Head position aggregate
loadComponent("HeadPosAggregate","PortDoubleAggregate")
HeadPosAggregate.loadService("rosparam")
HeadPosAggregate.rosparam.getAll()
HeadPosAggregate.configure()

connect("HeadPosAggregate.InputPort_0", "HeadPanTransmision.JointPosition", ConnPolicy())
connect("HeadPosAggregate.InputPort_1", "HeadTiltTransmision.JointPosition", ConnPolicy())

// Head Velocity port aggregate
loadComponent("HeadVelAggregate","PortDoubleAggregate")
HeadVelAggregate.loadService("rosparam")
HeadVelAggregate.rosparam.getAll()
HeadVelAggregate.configure()

connect("HeadVelAggregate.InputPort_0", "HeadPanTransmision.JointVelocity", ConnPolicy())
connect("HeadVelAggregate.InputPort_1", "HeadTiltTransmision.JointVelocity", ConnPolicy())

// Head PositionCommand split

loadComponent("HeadPosSplit","PortDoubleSplit")
HeadPosSplit.loadService("rosparam")
HeadPosSplit.rosparam.getAll()
HeadPosSplit.configure()

connect("HeadPosSplit.OutputPort_0", "HeadPanTransmisionInv.JointPosition", ConnPolicy())
connect("HeadPosSplit.OutputPort_1", "HeadTiltTransmisionInv.JointPosition", ConnPolicy())

// Torso torque port spliter
loadComponent("TorsoTrqSplit","PortDoubleSplit")
TorsoTrqSplit.loadService("rosparam")
TorsoTrqSplit.rosparam.getAll()
TorsoTrqSplit.configure()

connect("TorsoTrqSplit.OutputPort_0", "TorsoPanTransmisionInv.JointTorque", ConnPolicy())

// Torso Position port aggregate
loadComponent("TorsoPosAggregate","PortDoubleAggregate")
TorsoPosAggregate.loadService("rosparam")
TorsoPosAggregate.rosparam.getAll()
TorsoPosAggregate.configure()

connect("TorsoPosAggregate.OutputPort", "Jc.In0", ConnPolicy());
connect("TorsoPosAggregate.InputPort_0", "TorsoPanTransmision.JointPosition", ConnPolicy())

// Torso Velocity port aggregate
loadComponent("TorsoVelAggregate","PortDoubleAggregate")
TorsoVelAggregate.loadService("rosparam")
TorsoVelAggregate.rosparam.getAll()
TorsoVelAggregate.configure()

connect("TorsoVelAggregate.OutputPort", "Jvc.In0", ConnPolicy());
connect("TorsoVelAggregate.InputPort_0", "TorsoPanTransmision.JointVelocity", ConnPolicy())

connect("Jc.Out", "JcAll.In0", ConnPolicy());
connect("HeadPosAggregate.OutputPort", "JcAll.In1", ConnPolicy());

connect("Jvc.Out", "JvcAll.In0", ConnPolicy());

connect("Ts.Out0", "TorsoTrqSplit.InputPort", ConnPolicy());

connect("HeadVelAggregate.OutputPort", "JvcAll.In1", ConnPolicy());

loadComponent("CImp", "CartesianImpedance");
CImp.loadService("robot");
CImp.configure();

connect("Jc.Out", "CImp.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "CImp.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix", "CImp.MassMatrixInv_INPORT", ConnPolicy());

connect("CImp.JointTorqueCommand_OUTPORT", "Ts.In", ConnPolicy());

loadComponent("PoseIntRight", "CartesianInterpolator");

connect("PoseIntRight.CartesianPositionCommand", "CImp.CartPositionCommand0_INPORT", ConnPolicy());

loadComponent("PoseIntLeft", "CartesianInterpolator");

connect("PoseIntLeft.CartesianPositionCommand", "CImp.CartPositionCommand1_INPORT", ConnPolicy());

// tool

loadComponent("ToolIntRight", "CartesianInterpolator")
ToolIntRight.configure();
ToolIntRight.loadService("rosparam");
ToolIntRight.rosparam.getAll();
connect("ToolIntRight.CartesianPositionCommand", "CImp.ToolPositionCommand0_INPORT", ConnPolicy())

loadComponent("ToolIntLeft", "CartesianInterpolator")
ToolIntLeft.configure();
ToolIntLeft.loadService("rosparam");
ToolIntLeft.rosparam.getAll();
connect("ToolIntLeft.CartesianPositionCommand", "CImp.ToolPositionCommand1_INPORT", ConnPolicy())

loadComponent("TfPub", "TfPublisher")
setActivityOnCPU("TfPub", 0.01, 1, ORO_SCHED_RT, 0)
if (useSimulationTime()) then { TfPub.loadService("sim_clock_activity") }
TfPub.loadService("rosparam");
TfPub.rosparam.getAll();
TfPub.configure();
connect("ToolIntRight.CartesianPositionCommand", "TfPub.In0", ConnPolicy())
connect("ToolIntLeft.CartesianPositionCommand", "TfPub.In1", ConnPolicy())
connect("PoseIntRight.CartesianPositionCommand", "TfPub.In2", ConnPolicy())
connect("PoseIntLeft.CartesianPositionCommand", "TfPub.In3", ConnPolicy())
stream("TfPub.OutTf", ros.comm.topic("/tf"))

connect("Ts.Out1", "TorquePubRight.InJointTorqueCommand", ConnPolicy())
TorquePubRight.configure();
stream("TorquePubRight.OutTorques", ros.comm.topic("/right_arm/torques"))

connect("Ts.Out1", "TorquePubLeft.InJointTorqueCommand", ConnPolicy())
TorquePubLeft.configure();
stream("TorquePubLeft.OutTorques", ros.comm.topic("/left_arm/torques"))

// impedance

loadComponent("ImpedanceIntRight", "CartesianImpedanceInterpolator");
connect("ImpedanceIntRight.CartesianImpedanceCommand", "CImp.CartImpedanceCommand0_INPORT", ConnPolicy());

loadComponent("ImpedanceIntLeft", "CartesianImpedanceInterpolator");
connect("ImpedanceIntLeft.CartesianImpedanceCommand", "CImp.CartImpedanceCommand1_INPORT", ConnPolicy());

loadComponent("JntImp", "JointImpedance")
JntImp.loadService("rosparam");
JntImp.rosparam.getAll();

connect("Jc.Out", "JntImp.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "JntImp.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix", "JntImp.MassMatrix_INPORT", ConnPolicy());
connect("JntImp.JointTorqueCommand_OUTPORT", "Ts.In", ConnPolicy());

JntImp.configure();

loadComponent("FK", "VelmaFK");
FK.loadService("robot");
FK.configure();

connect("ToolIntLeft.CartesianPositionCommand", "FK.LeftTool_INPORT", ConnPolicy())
connect("ToolIntRight.CartesianPositionCommand", "FK.RightTool_INPORT", ConnPolicy())

connect("Jc.Out", "FK.JointPosition_INPORT", ConnPolicy())

connect("FK.LeftPosition_OUTPORT", "PoseIntLeft.CartesianPosition", ConnPolicy())
connect("FK.RightPosition_OUTPORT", "PoseIntRight.CartesianPosition", ConnPolicy())

connect("FK.RightPosition_OUTPORT", "TfPub.In4", ConnPolicy())
connect("FK.LeftPosition_OUTPORT", "TfPub.In5", ConnPolicy())

## Force transformation

loadComponent("RightForceTransformation", "ForceTransformation")
RightForceTransformation.loadService("rosparam");
RightForceTransformation.rosparam.getAll();
RightForceTransformation.configure()

connect("RightForceTransformation.CurrentWristPose", "FK.RightWrist_OUTPORT", ConnPolicy())
connect("RightForceTransformation.CurrentSensorSlowFilteredWrench", rightFtSensorSlowFilteredWrench_OUTPORT_name(), ConnPolicy())
connect("RightForceTransformation.CurrentSensorFastFilteredWrench", rightFtSensorRawWrench_OUTPORT_name(), ConnPolicy())
connect("RightForceTransformation.Tool", "ToolIntRight.CartesianPositionCommand", ConnPolicy())

stream("RightForceTransformation.ToolGravityParam", ros.comm.topic("/right_arm/tg_param"))

stream("RightForceTransformation.OutputEndEffectorWrench", ros.comm.topic("/right_arm/transformed_wrench"))

loadComponent("LeftForceTransformation", "ForceTransformation")
LeftForceTransformation.loadService("rosparam");
LeftForceTransformation.rosparam.getAll();
LeftForceTransformation.configure()

connect("LeftForceTransformation.CurrentWristPose", "FK.LeftWrist_OUTPORT", ConnPolicy())
connect("LeftForceTransformation.CurrentSensorSlowFilteredWrench", leftFtSensorRawWrench_OUTPORT_name(), ConnPolicy())
connect("LeftForceTransformation.CurrentSensorFastFilteredWrench", leftFtSensorFastFilteredWrench_OUTPORT_name(), ConnPolicy())
connect("LeftForceTransformation.Tool", "ToolIntLeft.CartesianPositionCommand", ConnPolicy())

stream("LeftForceTransformation.ToolGravityParam", ros.comm.topic("/left_arm/tg_param"))

stream("LeftForceTransformation.OutputEndEffectorWrench", ros.comm.topic("/left_arm/transformed_wrench"))

## ForceControlLaw

loadComponent("RightForceControl", "ForceControlLaw")
RightForceControl.configure()
connect("RightForceControl.OutputEndEffectorPose", "CImp.CartPositionCommand0_INPORT", ConnPolicy())
connect("RightForceControl.CurrentEndEffectorPose", "FK.RightPosition_OUTPORT", ConnPolicy())
connect("RightForceTransformation.OutputEndEffectorWrench", "RightForceControl.CurrentEndEffectorWrench", ConnPolicy())
//connect("RightForceControl.IsSynchronisedIn","Irp6otHardwareInterface.IsSynchronised", ConnPolicy())
//connect("RightForceControl.GeneratorActiveOut","Irp6otHardwareInterface.GeneratorActiveIn", ConnPolicy())
stream("RightForceControl.CurrentFclParam", ros.comm.topic("/right_arm/fcl_param"))

loadComponent("LeftForceControl", "ForceControlLaw")
LeftForceControl.configure()
connect("LeftForceControl.OutputEndEffectorPose", "CImp.CartPositionCommand1_INPORT", ConnPolicy())
connect("LeftForceControl.CurrentEndEffectorPose", "FK.LeftPosition_OUTPORT", ConnPolicy())
connect("LeftForceTransformation.OutputEndEffectorWrench", "LeftForceControl.CurrentEndEffectorWrench", ConnPolicy())
//connect("LeftForceControl.IsSynchronisedIn","Irp6otHardwareInterface.IsSynchronised", ConnPolicy())
//connect("LeftForceControl.GeneratorActiveOut","Irp6otHardwareInterface.GeneratorActiveIn", ConnPolicy())
stream("LeftForceControl.CurrentFclParam", ros.comm.topic("/left_arm/fcl_param"))

## joint trajectory generator

loadComponent("TrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
TrajectoryGeneratorJoint.loadService("rosparam");
TrajectoryGeneratorJoint.rosparam.getAll();
connect("Jc.Out","TrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand","JntImp.JointPositionCommand_INPORT", ConnPolicy())
TrajectoryGeneratorJoint.configure()

loadComponent("JntLimit", "JointLimitAvoidance");
JntLimit.loadService("rosparam");
JntLimit.rosparam.getAll();

connect("Jc.Out", "JntLimit.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "JntLimit.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix", "JntLimit.MassMatrix_INPORT", ConnPolicy());
connect("JntLimit.JointTorqueCommand_OUTPORT", "CImp.NullSpaceTorqueCommand_INPORT", ConnPolicy());


//connect("TJ.NullSpaceTorqueCommand_OUTPORT", "JntLimit.NullSpaceTorqueCommand_INPORT", ConnPolicy());
connect("VG.GravTrq", "JntLimit.NullSpaceTorqueCommand_INPORT", ConnPolicy());

// head look-at

//loadComponent("HeadIK", "HeadLookAt3D")
//HeadIK.loadService("rosparam");
//HeadIK.rosparam.getAll();
//HeadIK.configure();

//loadComponent("PT", "PoseTransform")
//PT.loadService("rosparam");
//PT.rosparam.getAll();
//PT.configure();

//connect("PT.SecondaryTargetPoint", "HeadIK.TargetPoint_INPORT", ConnPolicy());

//if ((os.isenv("HEAD_JOY") == false) || (os.getenv("HEAD_JOY") == "true")) then {
//  connect("TJ.PrimaryFrameSelector_OUTPORT", "PT.PrimaryFrameSelector", ConnPolicy());
//  connect("TJ.HeadTargetPoint_OUTPORT", "PT.PrimaryTargetPoint", ConnPolicy());
//  connect("FK.RightPosition_OUTPORT", "PT.PrimaryFrame1", ConnPolicy());
//  connect("FK.LeftPosition_OUTPORT", "PT.PrimaryFrame2", ConnPolicy());
//  stream("PT.PrimaryTargetPassThrough", ros.comm.topic("/head_lookat_pose"));
//}
//else {
//    stream("HeadIK.TargetPoint_INPORT", ros.comm.topic("/head_lookat_pose"));
//}

//stream("PT.PrimaryTargetPoint", ros.comm.topic("/head_lookat_pose"));

//connect("HeadPosSplit.InputPort", "HeadIK.HeadJointPositionCommand_OUTPORT", ConnPolicy());
////connect("TorsoPosAggregate.OutputPort", "HeadIK.JointPosition_INPORT", ConnPolicy());




loadComponent("HeadTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
HeadTrajectoryGeneratorJoint.loadService("rosparam");
HeadTrajectoryGeneratorJoint.rosparam.getAll();
connect("HeadPosAggregate.OutputPort","HeadTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("HeadTrajectoryGeneratorJoint.JointPositionCommand","HeadPosSplit.InputPort", ConnPolicy())
HeadTrajectoryGeneratorJoint.configure()

// CONFIGURE
Jc.configure();
Jvc.configure();
JcAll.configure();
JvcAll.configure();
Ts.configure();
Dwr.configure();
Dwl.configure();
PoseIntRight.configure();
PoseIntLeft.configure();
ImpedanceIntRight.configure()
ImpedanceIntLeft.configure()
JntLimit.configure();

addPeer("scheme", "TorsoPanTransmision")
addPeer("scheme", "TorsoPanTransmisionInv")
addPeer("scheme", "HeadPanVelocityLimiter")
addPeer("scheme", "HeadTiltVelocityLimiter")
addPeer("scheme", "HeadPanTransmision")
addPeer("scheme", "HeadPanTransmisionInv")
addPeer("scheme", "HeadTiltTransmision")
addPeer("scheme", "HeadTiltTransmisionInv")
addPeer("scheme", "HeadPosAggregate")
addPeer("scheme", "HeadPosSplit")
addPeer("scheme", "TorsoTrqSplit")
addPeer("scheme", "TorsoPosAggregate")
addPeer("scheme", "TorsoVelAggregate")
addPeer("scheme", "Jc");
addPeer("scheme", "Jvc");
addPeer("scheme", "JcAll");
addPeer("scheme", "JvcAll");
addPeer("scheme", "Mass");
addPeer("scheme", "CImp");
addPeer("scheme", "Ts");
addPeer("scheme", "JntLimit");
addPeer("scheme", "PoseIntRight");
addPeer("scheme", "PoseIntLeft");
addPeer("scheme", "ImpedanceIntRight");
addPeer("scheme", "ImpedanceIntLeft");
addPeer("scheme", "VG");
addPeer("scheme", "ToolIntRight");
addPeer("scheme", "ToolIntLeft");
addPeer("scheme", "JntImp");
addPeer("scheme", "FK");
addPeer("scheme", "TrajectoryGeneratorJoint");
addPeer("scheme", "HeadTrajectoryGeneratorJoint");
addPeer("scheme", "RightForceControl");
addPeer("scheme", "LeftForceControl");
addPeer("scheme", "RightForceTransformation");
addPeer("scheme", "LeftForceTransformation");
//addPeer("scheme", "HeadIK");
//addPeer("scheme", "PT");

scheme.addBlock("TorsoPanTransmision");
scheme.addBlock("TorsoPanTransmisionInv");
scheme.addBlock("HeadPanVelocityLimiter");
scheme.addBlock("HeadTiltVelocityLimiter");
scheme.addBlock("HeadPanTransmision");
scheme.addBlock("HeadPanTransmisionInv");
scheme.addBlock("HeadTiltTransmision");
scheme.addBlock("HeadTiltTransmisionInv");
scheme.addBlock("HeadPosAggregate");
scheme.addBlock("HeadPosSplit");
scheme.addBlock("TorsoTrqSplit");
scheme.addBlock("TorsoPosAggregate");
scheme.addBlock("TorsoVelAggregate");
scheme.addBlock("Jc");
scheme.addBlock("Jvc");
scheme.addBlock("JcAll");
scheme.addBlock("JvcAll");
scheme.addBlock("Mass");
scheme.addBlock("CImp");
scheme.addBlock("Ts");
scheme.addBlock("JntLimit");
scheme.addBlock("PoseIntRight");
scheme.addBlock("PoseIntLeft");
scheme.addBlock("ImpedanceIntRight");
scheme.addBlock("ImpedanceIntLeft");
scheme.latchConnections("CImp", "PoseIntRight", true);
scheme.latchConnections("CImp", "PoseIntLeft", true);
scheme.addBlock("VG");
scheme.addBlock("ToolIntRight");
scheme.addBlock("ToolIntLeft");
scheme.addBlock("JntImp");
scheme.addBlock("FK");
scheme.addBlock("TrajectoryGeneratorJoint");
scheme.addBlock("HeadTrajectoryGeneratorJoint");
scheme.addBlock("RightForceControl");
scheme.addBlock("LeftForceControl");
scheme.addBlock("RightForceTransformation");
scheme.addBlock("LeftForceTransformation");
//scheme.addBlock("HeadIK");
//scheme.addBlock("PT")
//------------------------------------------------------------------------------
//-- ROS Diagnostics
//------------------------------------------------------------------------------

loadComponent("JntPub", "JointStatePublisher");
setActivityOnCPU("JntPub", 0.002, 2, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { JntPub.loadService("sim_clock_activity") }
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

connect("JcAll.Out", "JntPub.JointPosition", ConnPolicy());
connect("JvcAll.Out", "JntPub.JointVelocity", ConnPolicy());
connect("JvcAll.Out", "JntPub.JointEffort", ConnPolicy());
//connect("CImp.JointTorqueCommand_OUTPORT", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));
stream("JntPub.joint_state", ros.comm.topic("/joint_states2"));

JntPub.configure()

//------------------------------------------------------------------------------
//-- ROS Command interface
//------------------------------------------------------------------------------

connect("CartTrjRight.CartesianTrajectoryCommand", "PoseIntRight.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjRight.CartesianPositionCommand", "PoseIntRight.CartesianPositionCommand", ConnPolicy());
connect("FK.RightPosition_OUTPORT", "CartTrjRight.CartesianPosition", ConnPolicy())

stream("CartTrjRight.trajectory", ros.comm.topic("/right_arm/trajectory"));

CartTrjRight.configure();
CartTrjRight.loadService("actionlib")
CartTrjRight.actionlib.connect("/right_arm/cartesian_trajectory")

connect("CartTrjLeft.CartesianTrajectoryCommand", "PoseIntLeft.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjLeft.CartesianPositionCommand", "PoseIntLeft.CartesianPositionCommand", ConnPolicy());
connect("FK.LeftPosition_OUTPORT", "CartTrjLeft.CartesianPosition", ConnPolicy())

stream("CartTrjLeft.trajectory", ros.comm.topic("/left_arm/trajectory"));

CartTrjLeft.configure();
CartTrjLeft.loadService("actionlib")
CartTrjLeft.actionlib.connect("/left_arm/cartesian_trajectory")

// Joint

loadComponent("SplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivityOnCPU("SplineTrajectoryActionJoint", 0.01 ,2 ,ORO_SCHED_RT, 0)
if (useSimulationTime()) then { SplineTrajectoryActionJoint.loadService("sim_clock_activity") }
SplineTrajectoryActionJoint.loadService("rosparam");
SplineTrajectoryActionJoint.rosparam.getAll();
SplineTrajectoryActionJoint.loadService("actionlib")
SplineTrajectoryActionJoint.actionlib.connect("/spline_trajectory_action_joint")
connect("SplineTrajectoryActionJoint.trajectoryPtr", "TrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("Jc.Out","SplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand", "SplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())
SplineTrajectoryActionJoint.configure()

loadComponent("HeadSplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivityOnCPU("HeadSplineTrajectoryActionJoint", 0.01 ,2 ,ORO_SCHED_RT, 0)
if (useSimulationTime()) then { HeadSplineTrajectoryActionJoint.loadService("sim_clock_activity") }
HeadSplineTrajectoryActionJoint.loadService("rosparam");
HeadSplineTrajectoryActionJoint.rosparam.getAll();
HeadSplineTrajectoryActionJoint.loadService("actionlib")
HeadSplineTrajectoryActionJoint.actionlib.connect("/head_spline_trajectory_action_joint")
connect("HeadSplineTrajectoryActionJoint.trajectoryPtr", "HeadTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("HeadPosAggregate.OutputPort","HeadSplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("HeadTrajectoryGeneratorJoint.JointPositionCommand", "HeadSplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())
HeadSplineTrajectoryActionJoint.configure()

// tool

loadComponent("CartToolRight", "CartesianTrajectoryAction");
setActivityOnCPU("CartToolRight", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { CartToolRight.loadService("sim_clock_activity") }
CartToolRight.configure()
CartToolRight.loadService("actionlib")
CartToolRight.actionlib.connect("/right_arm/tool_trajectory")
connect("CartToolRight.CartesianTrajectoryCommand","ToolIntRight.CartesianTrajectoryCommand", ConnPolicy())

loadComponent("CartToolLeft", "CartesianTrajectoryAction");
setActivityOnCPU("CartToolLeft", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { CartToolLeft.loadService("sim_clock_activity") }
CartToolLeft.configure()
CartToolLeft.loadService("actionlib")
CartToolLeft.actionlib.connect("/left_arm/tool_trajectory")
connect("CartToolLeft.CartesianTrajectoryCommand","ToolIntLeft.CartesianTrajectoryCommand", ConnPolicy())

// impedance

loadComponent("CartImpRight", "CartesianImpedanceAction");
setActivityOnCPU("CartImpRight", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { CartImpRight.loadService("sim_clock_activity") }

connect("CartImpRight.CartesianImpedanceTrajectoryCommand_OUTPORT", "ImpedanceIntRight.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpRight.impedance_INPORT", ros.comm.topic("/right_arm/impedance"));

CartImpRight.configure();
CartImpRight.loadService("actionlib")
CartImpRight.actionlib.connect("/right_arm/cartesian_impedance")

loadComponent("CartImpLeft", "CartesianImpedanceAction");
setActivityOnCPU("CartImpLeft", 0.01, 1, ORO_SCHED_RT, 0);
if (useSimulationTime()) then { CartImpLeft.loadService("sim_clock_activity") }

connect("CartImpLeft.CartesianImpedanceTrajectoryCommand_OUTPORT", "ImpedanceIntLeft.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpLeft.impedance_INPORT", ros.comm.topic("/left_arm/impedance"));

CartImpLeft.configure();
CartImpLeft.loadService("actionlib")
CartImpLeft.actionlib.connect("/left_arm/cartesian_impedance")

//------------------------------------------------------------------------------

LWRrDiag.start();
LWRlDiag.start();

TJ.start();

scheme.start();
TorsoPanTransmision.start();
TorsoPanTransmisionInv.start();
HeadPanTransmision.start();
HeadPanTransmisionInv.start();
HeadTiltTransmision.start();
HeadTiltTransmisionInv.start();
HeadPanVelocityLimiter.start();
HeadTiltVelocityLimiter.start();
HeadPosSplit.start();
TorsoTrqSplit.start();
TorsoPosAggregate.start();
TorsoVelAggregate.start();
HeadPosAggregate.start();
Jc.start();
Jvc.start();
JcAll.start();
JvcAll.start();
Ts.start();
Dwr.start();
Dwl.start();
Mass.start();
//CImp.start();
JntPub.start();
CartTrjRight.start();
CartTrjLeft.start();
ImpedanceIntRight.start();
ImpedanceIntLeft.start();
CartImpRight.start();
CartImpLeft.start();
//VG.start();
CartToolRight.start();
CartToolLeft.start();
ToolIntRight.start();
ToolIntLeft.start();
TGR.start();
TfPub.start();
TorquePubRight.start();
TorquePubLeft.start();
SplineTrajectoryActionJoint.start();
HeadSplineTrajectoryActionJoint.start();
FK.start();
rightHandMoveAction.start();
leftHandMoveAction.start();
//PT.start()
//HeadIK.start()
//waitForInterrupt()

// dot graph generation
//dot.dot_file="/home/dseredyn/ws_sim_full/oro.dot"
//dot.generate();

